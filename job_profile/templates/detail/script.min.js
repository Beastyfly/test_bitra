/* eslint-disable */
(function (exports) {
    'use strict';

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    BX.ready(function () {
      BX.BitrixVue.createApp({
        data: function data() {
          return {
            dragItems: [],
            // Drag-and-Drop step4
            dragItemsAdd: [],
            // Drag-and-Drop step4
            isAccessPage: false,
            currentStep: 1,
            currentStepLast: null,
            currentUserId: null,
            isOD: false,
            isFiller: false,
            isApprover: false,
            isTnD: false,
            isCnB: false,
            initiator: null,
            inTrash: false,
            status: null,
            statusId: null,
            statusClass: null,
            stage: null,
            stageId: null,
            createDate: null,
            updateDate: null,
            processingUser: {},
            processingUsers: {},
            work: null,
            roleSLA: null,
            editStageFormData: {
              ID: '',
              TITLE: '',
              RESPONSIBLE_USER: ''
            },
            modelRole: [],
            stages: [],
            isFullyApproved: false,
            costCenters: [],
            departments: [],
            diFiles: [],
            selectDiFile: null,
            branches: [],
            locations: [],
            returningStages: [],
            breadcrumbs: [],
            defaultBreadcrumbs: [{
              label: 'HR-сервисы',
              url: '/renins-kb/'
            }, {
              label: 'Профиль должности',
              url: '/renins/job_profile/list/'
            }],
            step_sections: ['HR OD', 'Руководитель', 'T&D', 'C&B'],
            current_step_section: 'HR OD',
            collapsed: {
              stages: true
            },
            showAddForm: false,
            addFormData: {
              users: []
            },
            approve_comment: null,
            reject_comment: null,
            revoke_comment: null,
            return_comment: null,
            return_stage: null,
            isAddFormSaving: false,
            isSaving: false,
            isSending: false,
            isDeleting: false,
            isApproving: false,
            isRejecting: false,
            isRevoking: false,
            isProcessing: false,
            isReturning: false,
            isSaveButtonDisabled: false,
            allowedSend: false,
            allowedChangeStages: false,
            allowedApprove: false,
            allowedApproveEarlier: false,
            allowedGetToWork: false,
            allowedRevoke: false,
            isShowStageModal: false,
            isShowDeleteModal: false,
            isShowApproveModal: false,
            isShowRejectModal: false,
            isShowRevokeModal: false,
            isShowReturnModal: false,
            isShowSuccessfullyApprovedModal: false,
            isShowSuccessfullyRejectedModal: false,
            isShowSuccessfullyRevokedModal: false,
            isShowSuccessfullyArchivedModal: false,
            isShowSuccessfullyReturnedModal: false,
            isShowDownloadDIModal: false,
            delegateData: {
              processingUser: [],
              error: null
            },
            isShowEditModal: {
              1: false,
              2: false,
              3: false,
              4: false,
              5: false,
              6: false,
              7: false,
              8: false,
              9: false,
              10: false,
              11: false,
              12: false,
              13: false,
              14: false,
              15: false,
              16: false
            },
            errors: {
              1: {},
              2: {},
              3: {},
              4: {},
              5: {},
              6: {},
              7: {},
              8: {},
              9: {},
              10: {},
              11: {},
              12: {},
              13: {},
              14: {},
              15: {},
              16: {}
            },
            formData: {},
            formDataEdit: {},
            b2bClients: [{
              value: 'Крупные',
              label: 'Крупные'
            }, {
              value: 'Средние',
              label: 'Средние'
            }, {
              value: 'Мелкие',
              label: 'Мелкие'
            }],
            b2cClients: [{
              value: 'VIP',
              label: 'VIP'
            }, {
              value: 'Средние',
              label: 'Средние'
            }, {
              value: 'Мелкие',
              label: 'Мелкие'
            }],
            otherClients: [{
              value: 'Гос. органы',
              label: 'Гос. органы'
            }, {
              value: 'Общественные организации',
              label: 'Общественные организации'
            }, {
              value: 'Партнеры',
              label: 'Партнеры'
            }, {
              value: 'Дилеры',
              label: 'Дилеры'
            }, {
              value: 'Агенты',
              label: 'Агенты'
            }],
            englishLevels: [{
              value: 'Не обязателен',
              label: 'Не обязателен'
            }, {
              value: 'Elementary (A1)',
              label: 'Elementary (A1)'
            }, {
              value: 'Pre-intermediate (A2)',
              label: 'Pre-intermediate (A2)'
            }, {
              value: 'Intermediate (B1)',
              label: 'Intermediate (B1)'
            }, {
              value: 'Upper-intermediate (B2)',
              label: 'Upper-intermediate (B2)'
            }, {
              value: 'Advanced (C1)',
              label: 'Advanced (C1)'
            }, {
              value: 'Proficiency (C2)',
              label: 'Proficiency (C2)'
            }],
            competencesQuestions: [{
              id: 'q1',
              text: 'Учитывает мотивы, чувства и потребности окружающих'
            }, {
              id: 'q2',
              text: 'Предвосхищает потребности'
            }, {
              id: 'q3',
              text: 'Неравнодушен к проблемам других, оказывает помощь'
            }, {
              id: 'q4',
              text: 'Выходит за рамки инструкций'
            }, {
              id: 'q5',
              text: 'Оперативно реагирует на запросы, выполняет взятые обязательства'
            }, {
              id: 'q6',
              text: 'Озвучивает мысли ясно и понятно'
            }, {
              id: 'q7',
              text: 'Объясняет причины отказа, предлагает решения'
            }, {
              id: 'q8',
              text: 'Качественно анализирует и синтезирует информацию'
            }, {
              id: 'q9',
              text: 'Опирается на данные и аналитику'
            }, {
              id: 'q10',
              text: 'Предотвращает возможные риски'
            }, {
              id: 'q11',
              text: 'Пилотирует решения'
            }, {
              id: 'q12',
              text: 'Честен и открыт с окружающими'
            }, {
              id: 'q13',
              text: 'Настойчив в достижении цели'
            }, {
              id: 'q14',
              text: 'Берет ответственность за решения'
            }, {
              id: 'q15',
              text: 'Действует для изменения ситуации'
            }, {
              id: 'q16',
              text: 'Развивается и самосовершенствуется'
            }, {
              id: 'q17',
              text: 'Ставит перед собой новые амбициозные цели'
            }, {
              id: 'q18',
              text: 'Изучает новые технологии'
            }, {
              id: 'q19',
              text: 'Внедряет новые подходы'
            }, {
              id: 'q20',
              text: 'Привлекает в команду сильных людей'
            }, {
              id: 'q21',
              text: 'Вносит предложения по улучшению процессов и регламентов смежных подразделений'
            }, {
              id: 'q22',
              text: 'Ориентируется на цели и интересы компании'
            }, {
              id: 'q23',
              text: 'Сотрудничает с коллегами, нацелен на общий результат'
            }, {
              id: 'q24',
              text: 'Учится на ошибках'
            }, {
              id: 'q25',
              text: 'Поддерживает и помогает другим в развитии'
            }, {
              id: 'q26',
              text: 'Дает обратную связь'
            }, {
              id: 'q27',
              text: 'Принимает обратную связь'
            }, {
              id: 'q28',
              text: 'Уважает время и ресурсы коллег'
            }, {
              id: 'q29',
              text: 'Своевременно отвечает на вопросы окружающих'
            }],
            updatingStages: {},
            deletingStages: {},
            requiredFields: [],
            validatedSteps: [],
            downloadDIError: false
          };
        },
        created: function created() {
          var cfg = window.cfg_job_profile;
          this.init(cfg);
          this.getItemsList();
        },
        methods: babelHelpers.defineProperty({
          init: function init(data) {
            console.log('data', data);
            this.currentUserId = data.currentUserId;
            this.isOD = data.isOD;
            this.isFiller = data.isFiller;
            this.isApprover = data.isApprover;
            this.isTnD = data.isTnD;
            this.isCnB = data.isCnB;
            this.initiator = data.initiator;
            this.inTrash = data.inTrash;
            this.status = data.status;
            this.statusId = data.statusId;
            this.statusClass = data.statusClass;
            this.stage = data.stage;
            this.stageId = data.stageId;
            this.stages = data.stages;
            this.isFullyApproved = data.isFullyApproved;
            this.processingUser = data.processingUser;
            this.processingUsers = data.processingUsers;
            this.createDate = data.createDate;
            this.updateDate = data.updateDate;
            this.modelRole = data.modelRole;
            this.work = data.work;
            this.roleSLA = data.roleSLA;
            this.allowedChangeStages = data.allowedChangeStages;
            this.allowedApprove = data.allowedApprove;
            this.allowedApproveEarlier = data.allowedApproveEarlier;
            this.allowedGetToWork = data.allowedGetToWork;
            this.allowedRevoke = data.allowedRevoke;
            this.costCenters = data.costCenters;
            this.departments = data.departments;
            this.diFiles = data.diFiles;
            this.branches = data.branches;
            this.locations = data.locations;
            this.returningStages = data.returningStages;
            this.isAccessPage = data.isAccessPage;
            if (this.isFiller && this.stageId == 'filling' && this.statusId != 'trash') window.location.href = '/renins/job_profile/?DRAFT=' + data.formData.id;

            // Загрузка данных в форму
            for (var property in data.formData) {
              if (data.formData.hasOwnProperty(property)) this.formData[property] = data.formData[property];
            }
            if (!this.formData.competencies) this.formData.competencies = {};
            this.formData.checksCompetencies = {};
            this.formData.compTableIndex = {};
            var i = 1;
            for (var index in this.competencesQuestions) {
              var id = this.competencesQuestions[index].id;
              if (this.formData.competencies.hasOwnProperty(id) && this.formData.competencies[id]) {
                this.formData.compTableIndex[id] = i++;
                this.formData.checksCompetencies[id] = true;
              }
            }
            this.breadcrumbs = [].concat(babelHelpers.toConsumableArray(this.defaultBreadcrumbs), [{
              label: 'ID ' + this.formData.id
            }]);
            this.copyFormForEdit();

            // Удаление кнопки блока C&B если нет доступа к блоку
            if (parseInt(this.modelRole[3]) === 2 && this.step_sections.length === 4) this.step_sections.pop();

            // Переходы сразу на конкретные шаги, если шаг не записан
            if (!this.currentStepLast) {
              if (this.isOD) this.current_step_section = 'HR OD';else if (this.isFiller || this.isApprover) this.current_step_section = 'Руководитель';else if (this.isTnD) this.current_step_section = 'T&D';
              // Переход сразу на этап C&B при возможности редактировать
              else if (this.isCnB || this.modelRole[3] === true) this.current_step_section = 'C&B';
            }
            if (!this.formDataEdit.languages) this.formDataEdit.languages = [];
            if (this.formDataEdit.languages.length < 1) this.formDataEdit.languages = [{
              name: '',
              level: ''
            }];
            if (!this.formDataEdit.review) this.formDataEdit.review = [];
            if (this.formDataEdit.review.length < 1) this.formDataEdit.review = [{
              name: '',
              code: ''
            }];
            this.requiredFields = data.requiredFields;
          },
          //--Функционал Drag-and-Drop--
          getItemsList: function getItemsList() {
            if (this.formData.mainDuties && !Array.isArray(this.formData.mainDuties)) {
              this.formData.mainDuties = Object.values(this.formData.mainDuties);
            }
            var arrRes = [];
            this.formData.mainDuties.forEach(function (elem, ind) {
              var promRes = {
                'duty': elem.duty,
                'result': elem.result,
                'id': ind
              };
              arrRes.push(promRes);
            });
            this.dragItems = arrRes;
            if (this.formData.addDuties && !Array.isArray(this.formData.addDuties)) {
              this.formData.addDuties = Object.values(this.formData.addDuties);
            }
            arrRes = [];
            this.formDataEdit.addDuties.forEach(function (elem, ind) {
              var promRes = {
                'duty': elem.duty,
                'result': elem.result,
                'id': ind
              };
              arrRes.push(promRes);
            });
            this.dragItemsAdd = arrRes;
          },
          handleDropEvent: function handleDropEvent(newItems, targetIndex) {
            this.dragItems = newItems;
          },
          handleDropEventAdd: function handleDropEventAdd(newItems, targetIndex) {
            this.dragItemsAdd = newItems;
          },
          //--Функционал Drag-and-Drop--
          copyFormForEdit: function copyFormForEdit() {
            // Копирование данных формы для редактирования
            this.formDataEdit = JSON.parse(JSON.stringify(this.formData));
          },
          toggle: function toggle(value) {
            this.$set(this.collapsed, value, !Boolean(this.collapsed[value]));
            console.log(this.collapsed[value]);
          },
          isCollapsed: function isCollapsed(value) {
            if (!this.collapsed.hasOwnProperty(value)) return false;
            return Boolean(this.collapsed[value]);
          },
          close: function close(block) {
            this.isShowEditModal[block] = false;
            this.copyFormForEdit();
            this.errors[block] = {};
          },
          redirectToList: function redirectToList() {
            window.location.href = document.referrer;
            // window.location.href = '/renins/job_profile/list/';
          },
          getStepClass: function getStepClass(i) {
            return {
              active: this.currentStep === i,
              success: this.currentStep > i
            };
          },
          addDepartmentGoal: function addDepartmentGoal() {
            this.formDataEdit.departmentGoals.push('');
          },
          addPositionGoal: function addPositionGoal() {
            this.formDataEdit.positionGoals.push('');
          },
          addMainDuty: function addMainDuty() {
            this.formDataEdit.mainDuties.push({
              duty: '',
              result: '',
              id: ''
            });
            this.dragItems.push({
              duty: '',
              result: '',
              id: ''
            });
          },
          addAdditionalDuty: function addAdditionalDuty() {
            this.formDataEdit.addDuties.push({
              duty: '',
              result: '',
              id: ''
            });
            this.dragItemsAdd.push({
              duty: '',
              result: '',
              id: ''
            });
          },
          addLanguage: function addLanguage() {
            this.formDataEdit.languages.push({
              name: '',
              level: ''
            });
          },
          addReview: function addReview() {
            this.formDataEdit.review.push({
              name: '',
              code: ''
            });
          },
          addApprover: function addApprover() {
            if (!this.formDataEdit.addApprovers) this.formDataEdit.addApprovers = [];
            this.formDataEdit.addApprovers.push('');
          },
          removeApprover: function removeApprover(index) {
            this.formDataEdit.addApprovers.splice(index, 1);
          },
          addObserver: function addObserver() {
            if (!this.formDataEdit.addObservers) this.formDataEdit.addObservers = [];
            this.formDataEdit.addObservers.push('');
          },
          removeObserver: function removeObserver(index) {
            this.formDataEdit.addObservers.splice(index, 1);
          },
          showStageModal: function showStageModal(stage) {
            this.editStageFormData.ID = stage.ID;
            this.editStageFormData.RESPONSIBLE_USER = stage.RESPONSIBLE_USER;
            this.isShowStageModal = true;
          },
          updateResponsibleUser: function updateResponsibleUser(stageId, value) {
            var _this = this;
            this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, true));
            var request = BX.ajax.runComponentAction('renins:job_profile', 'updateStage', {
              mode: 'class',
              data: {
                entityId: this.formData.id,
                stageId: stageId,
                data: {
                  RESPONSIBLE_USER: value
                }
              }
            });
            request.then(function (response) {
              console.log(response);
              _this.stages = response.data;

              // Обновим поле с ответственным
              var stage = _this.stages.find(function (item) {
                return item.ID === stageId;
              });
              if (stage.NAME === _this.stage) _this.processingUser = {
                id: value,
                fio: stage.RESPONSIBLE_USER_NAME
              };
              _this.updatingStages = _objectSpread(_objectSpread({}, _this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              _this.isShowStageModal = false;
              _this.sendNotifyChangeApprove();
            }, function (response) {
              console.log(response);
              this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              alert('Ошибка!');
            });
          },
          stepHasErrors: function stepHasErrors(step) {
            var _this2 = this;
            var errorsCount = 0;
            var requiredFields = Object.keys(this.requiredFields).filter(function (key) {
              return _this2.requiredFields[key].step == step;
            });
            requiredFields.forEach(function (key) {
              if (_this2.errors[step][key]) {
                errorsCount++;
              }
            });
            return errorsCount > 0;
          },
          validateStep: function validateStep(step, revalidate) {
            var _this3 = this;
            // Валидация формы
            var errorsCount = 0;
            var requiredFields = Object.keys(this.requiredFields).filter(function (key) {
              if (revalidate && !_this3.errors[step].hasOwnProperty(key)) {
                return false;
              }
              if (_this3.requiredFields[key].step == step) {
                return true;
              }
              return false;
            });
            console.log('requiredFields', requiredFields);
            requiredFields.forEach(function (key) {
              if (_this3.errors[step].hasOwnProperty(key)) {
                delete _this3.errors[step][key];
              }
              var relHasValue = false;
              var fieldValue = _this3.formDataEdit[key];
              var hasRel = Boolean(_this3.requiredFields[key].rel) || _this3.requiredFields[key].relFields.length > 0; // Зависиме поле
              if (hasRel && _this3.requiredFields[key].rel) {
                var relValue = _this3.formDataEdit[_this3.requiredFields[key].rel];
                if (_this3.requiredFields[key].relValue.length) {
                  relHasValue = _this3.requiredFields[key].relValue.includes(relValue);
                } else {
                  relHasValue = Boolean(relValue);
                }
              }
              _this3.requiredFields[key].relFields.forEach(function (item) {
                var relValue = _this3.formDataEdit[item];
                if (relValue) {
                  relHasValue = true;
                }
              });

              // Если массив (цели или обязанности)
              if (Array.isArray(fieldValue)) {
                fieldValue = fieldValue.filter(function (v) {
                  if (babelHelpers["typeof"](v) === 'object' && v.hasOwnProperty('duty')) {
                    return v.duty && v.result;
                  }
                  return v;
                }).join('');
              }

              // Если объект (компетенции на 14 шаге)
              if (!Array.isArray(fieldValue) && fieldValue instanceof Object) {
                fieldValue = Object.keys(fieldValue).filter(function (item) {
                  return fieldValue[item];
                }).length >= _this3.requiredFields[key].minObjValues;
              }

              // Проверка заполнение одного из полей
              _this3.requiredFields[key].radioFields.forEach(function (field) {
                if (!fieldValue) {
                  fieldValue = _this3.formDataEdit[field];
                }
              });

              // Провезка зависимых полей
              if (hasRel) {
                if (!fieldValue && relHasValue) {
                  _this3.errors[step][key] = true;
                  //console.log(`${key}: обязательное для заполнения (зависимое)`);
                  errorsCount++;
                }
              } else if (!fieldValue) {
                _this3.errors[step][key] = true;
                // console.log(`${key}: обязательное для заполнения`);
                errorsCount++;
              }
            });
            this.errors = _objectSpread({}, this.errors);

            // Помечаем что шаг проходил проверку
            if (!revalidate && !this.validatedSteps.includes(step)) {
              this.validatedSteps.push(step);
            }
            console.log('this.errors', this.errors);
            return errorsCount === 0;
          },
          revalidateStep: function revalidateStep(step) {
            this.validateStep(step, true);
          },
          save: function save(block) {
            var _this4 = this;
            console.log('djn');
            console.log(this.dragItems);
            this.formDataEdit.mainDuties = this.dragItems;
            this.formDataEdit.addDuties = this.dragItemsAdd;
            if (!this.validateStep(block)) {
              this.isSaveButtonDisabled = true;
              return;
            }
            for (var index in this.competencesQuestions) {
              var id = this.competencesQuestions[index].id;
              console.log(this.competencesQuestions[index]);
              console.log(this.formDataEdit.competencies[id]);
              if (!this.formDataEdit.checksCompetencies.hasOwnProperty(id) || !this.formDataEdit.checksCompetencies[id]) this.formDataEdit.competencies[id] = null;
            }
            if (!this.formDataEdit.hasSubs) {
              this.formDataEdit.subordinatesCount = 0;
              this.formDataEdit.allSubordinatesCount = 0;
            }
            if (!this.formDataEdit.hasFuncSubs) this.formDataEdit.funcSubordinatesCount = 0;
            if (!this.formDataEdit.hasProjectSubs) this.formDataEdit.projectSubordinatesCount = 0;
            if (!this.formDataEdit.hasOutsourceSubs) this.formDataEdit.outsourceSubordinatesCount = 0;
            if (this.formDataEdit.b2bClients.length === 0) this.formDataEdit.b2bClients = [''];
            if (this.formDataEdit.b2cClients.length === 0) this.formDataEdit.b2cClients = [''];
            if (this.formDataEdit.otherClients.length === 0) this.formDataEdit.otherClients = [''];
            if (this.formDataEdit.hasOwnProperty('addObservers') && this.formDataEdit.addObservers.length === 0) this.formDataEdit.addObservers = [''];
            var formData = this.getDifData();
            if (!formData || Object.keys(formData).length === 0) {
              this.close(block);
              return;
            }
            this.currentStepLast = this.currentStep;
            this.isSaving = true;
            formData.id = this.formData.id;
            formData.editMode = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'save', {
              mode: 'class',
              data: {
                formData: formData
              }
            });
            request.then(function (response) {
              _this4.load(function () {
                _this4.isSaving = false;
                _this4.close(block);
                _this4.currentStep = _this4.currentStepLast;
              });
            }, function (response) {
              console.log(response);
              this.isSaving = false;
              alert('Ошибка!');
            });
          },
          load: function load(callback) {
            var _this5 = this;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'loadDetail', {
              mode: 'class',
              data: {
                id: this.formData.id
              }
            });
            request.then(function (response) {
              console.log('response', response);
              _this5.init(response.data);
              if (typeof callback === 'function') {
                callback(response.data);
              }
            }, function (response) {
              console.log(response);
              alert('Ошибка!');
            });
          },
          getDifData: function getDifData() {
            var _this6 = this;
            // Фильтруем измененные поля
            return Object.keys(this.formDataEdit).reduce(function (acc, key) {
              if (key === 'employeeObject') {
                return acc;
              }
              if (['addApprovers', 'addObservers', 'b2bClients', 'b2cClients', 'departmentGoals', 'otherClients', 'positionGoals', 'checksCompetencies'].indexOf(key) >= 0) {
                if (_this6.formDataEdit[key].length !== _this6.formData[key].length) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                for (var i = 0; i < _this6.formDataEdit[key].length; i++) {
                  if (!_this6.formData[key].hasOwnProperty(i) || _this6.formDataEdit[key][i] !== _this6.formData[key][i]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                }
              } else if (['addDuties', 'review', 'languages', 'mainDuties'].indexOf(key) >= 0) {
                if (!_this6.isArrayEmpty(_this6.formDataEdit[key]) && !_this6.isArrayEmpty(_this6.formData[key]) && _this6.formDataEdit[key].length !== _this6.formData[key].length) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                for (var _i = 0; _i < _this6.formDataEdit[key].length; _i++) {
                  if (!_this6.formData[key].hasOwnProperty(_i)) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                  for (var item in _this6.formDataEdit[key][_i]) {
                    if (_this6.formDataEdit[key][_i][item] !== _this6.formData[key][_i][item]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                  }
                }
              } else if (key === 'competencies') {
                for (var comp in _this6.formDataEdit[key]) {
                  if (_this6.formDataEdit[key][comp] !== _this6.formData[key][comp]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
                }
              } else if (_this6.formDataEdit[key] !== _this6.formData[key]) {
                return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, _this6.formDataEdit[key]));
              }
              return acc;
            }, {});
          },
          isArrayEmpty: function isArrayEmpty(ar) {
            for (var i = 0; i < ar.length; i++) {
              for (var item in ar[i]) {
                if (ar[i][item].length > 0) return false;
              }
            }
            return true;
          },
          send: function send() {
            var _this7 = this;
            this.isSending = true;
            // TODO валидация формы

            this.saveForm().then(function () {
              var request = BX.ajax.runComponentAction('renins:job_profile', 'send', {
                mode: 'class',
                data: {
                  id: _this7.formData.id
                }
              });
              request.then(function (response) {
                _this7.isSending = false;
              }, function (response) {
                this.isSending = false;
                alert('Ошибка!');
              });
            });
          },
          deleteElement: function deleteElement() {
            var _this8 = this;
            this.isDeleting = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'removeItems', {
              mode: 'class',
              data: {
                ids: [this.formData.id],
                deleting: this.inTrash === true ? 'Y' : 'N'
              }
            });
            request.then(function () {
              _this8.isShowSuccessfullyArchivedModal = true;
              _this8.isShowDeleteModal = false;
            }, function (response) {
              console.log(response);
              this.isDeleting = false;
              alert('Ошибка!');
            });
          },
          approve: function approve() {
            var _this9 = this;
            this.isApproving = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'approve', {
              mode: 'class',
              data: {
                id: this.formData.id,
                comment: this.approve_comment
              }
            });
            request.then(function (response) {
              _this9.isShowApproveModal = false;
              _this9.isShowSuccessfullyApprovedModal = true;
            }, function (response) {
              console.log(response);
              this.isApproving = false;
              alert('Ошибка!');
            });
          },
          sendNotifyChangeApprove: function sendNotifyChangeApprove() {
            console.log('notify');
            var request = BX.ajax.runComponentAction('renins:job_profile', 'sendNotifyChangeApprove', {
              mode: 'class',
              data: {
                messageFields: {
                  userID: this.editStageFormData.RESPONSIBLE_USER,
                  job: this.formDataEdit.positionName,
                  podraz: this.formDataEdit.department,
                  func1Name: this.formDataEdit.func1Name,
                  func2Name: this.formDataEdit.func1Name,
                  costCenter: this.formDataEdit.costCenter,
                  linkToProfile: window.location.hostname + '/renins/job_profile/?DRAFT=' + this.formDataEdit.id,
                  getToProfileExcel: window.location.hostname + '/renins/job_profile/export.php?ID=' + this.formDataEdit.id
                }
              }
            });
            request.then(function (response) {
              console.log('SUCCESS');
            }, function (response) {
              alert('Ошибка! Уведомление не было отправлено');
            });
          },
          reject: function reject() {
            var _this10 = this;
            this.isRejecting = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'reject', {
              mode: 'class',
              data: {
                id: this.formData.id,
                comment: this.reject_comment
              }
            });
            request.then(function (response) {
              _this10.isShowRejectModal = false;
              _this10.isShowSuccessfullyRejectedModal = true;
              _this10.isRejecting = false;
            }, function (response) {
              console.log(response);
              this.isRejecting = false;
              alert('Ошибка!');
            });
          },
          revoke: function revoke() {
            var _this11 = this;
            this.isRevoking = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'revoke', {
              mode: 'class',
              data: {
                id: this.formData.id,
                comment: this.revoke_comment
              }
            });
            request.then(function () {
              _this11.isShowRevokeModal = false;
              _this11.isShowSuccessfullyRevokedModal = true;
              _this11.redirectToList();
            }, function (response) {
              console.log(response);
              this.isRevoking = false;
              alert('Ошибка!');
            });
          },
          returning: function returning() {
            var _this12 = this;
            this.isReturning = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'return', {
              mode: 'class',
              data: {
                id: this.formData.id,
                stage: this.return_stage,
                comment: this.return_comment
              }
            });
            request.then(function () {
              _this12.isShowReturnModal = false;
              _this12.isShowSuccessfullyReturnedModal = true;
            }, function (response) {
              console.log(response);
              this.isReturning = false;
              alert('Ошибка!');
            });
          },
          delegate: function delegate() {},
          isStageDeleting: function isStageDeleting(id) {
            return Boolean(this.deletingStages[id]);
          },
          isStageUpdating: function isStageUpdating(id) {
            return Boolean(this.updatingStages[id]);
          },
          toggleChecked: function toggleChecked(stageId, value) {
            var _this13 = this;
            this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, true));
            var request = BX.ajax.runComponentAction('renins:job_profile', 'updateStage', {
              mode: 'class',
              data: {
                entityId: this.formData.id,
                stageId: stageId,
                data: {
                  CHECKED: value ? 'Y' : 'N'
                }
              }
            });
            request.then(function (response) {
              console.log(response);
              _this13.stages = response.data;
              _this13.updatingStages = _objectSpread(_objectSpread({}, _this13.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
            }, function (response) {
              console.log(response);
              this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              alert('Ошибка!');
            });
          },
          addAdditionStage: function addAdditionStage() {
            var _this14 = this;
            this.isAddFormSaving = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'addAdditionStage', {
              mode: 'class',
              data: {
                entityId: this.formData.id,
                users: this.addFormData.users
              }
            });
            request.then(function (response) {
              console.log(response);
              _this14.stages = response.data;
              _this14.isAddFormSaving = false;
              _this14.showAddForm = false;
              _this14.addFormData.users = [];
            }, function (response) {
              console.log(response);
              this.isAddFormSaving = false;
              alert('Ошибка!');
            });
          },
          deleteAdditionStage: function deleteAdditionStage(id) {
            var _this15 = this;
            this.deletingStages = _objectSpread(_objectSpread({}, this.deletingStages), {}, babelHelpers.defineProperty({}, id, true));
            var request = BX.ajax.runComponentAction('renins:job_profile', 'deleteAdditionStage', {
              mode: 'class',
              data: {
                entityId: this.formData.id,
                stageId: id
              }
            });
            request.then(function (response) {
              console.log(response);
              _this15.stages = response.data;
            }, function (response) {
              console.log(response);
              alert('Ошибка!');
            });
          },
          getToWork: function getToWork() {
            var _this16 = this;
            // Взять заявку в работу
            this.currentStepLast = this.currentStep;
            this.isProcessing = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'getToWork', {
              mode: 'class',
              data: {
                id: this.formData.id
              }
            });
            request.then(function () {
              _this16.load(function () {
                _this16.isProcessing = false;
                _this16.currentStep = _this16.currentStepLast;
              });
            }, function (response) {
              console.log(response);
              this.isProcessing = false;
              alert('Ошибка!');
            });
          },
          planning: function planning() {
            var res = [];
            if (this.formData.isShortTerm) res.push('Краткосрочный');
            if (this.formData.isMediumTerm) res.push('Среднесрочный');
            if (this.formData.isLongTerm) res.push('Долгосрочный');
            return res.join(', ');
          },
          premium: function premium() {
            var res = [];
            if (this.formData.premiumMonth) res.push('Ежемесячная');
            if (this.formData.premiumQuarter) res.push('Квартальная');
            if (this.formData.premiumHalfyear) res.push('Полугодовая');
            if (this.formData.premiumYear) res.push('Годовая');
            return res.join(', ');
          },
          downloadExcel: function downloadExcel() {
            var link = document.createElement('a');
            link.setAttribute('href', '/renins/job_profile/export.php?ID=' + this.formData.id);
            //link.setAttribute('download', 'report.xlsx');
            link.click();
          },
          downloadDi: function downloadDi() {
            var link = document.createElement('a');
            link.setAttribute('href', '/renins/job_profile/exportDI.php?fileID=' + this.selectDiFile);
            link.setAttribute('target', '_blank');
            link.click();
          },
          updateManagers: function updateManagers(cost) {
            var _this17 = this;
            if (cost) {
              var request = BX.ajax.runComponentAction('renins:job_profile', 'getUserByPid', {
                mode: 'class',
                data: {
                  pid: cost.func1Pid
                }
              });
              request.then(function (response) {
                _this17.formDataEdit.func1Pid = response.data.id;
                _this17.formDataEdit.managerExcoFio = response.data.fio;
                _this17.formDataEdit.managerExcoIsObserver = true;
              }, function (response) {
                console.log(response);
                alert('Ошибка!');
              });
              var request2 = BX.ajax.runComponentAction('renins:job_profile', 'getUserByPid', {
                mode: 'class',
                data: {
                  pid: cost.func2Pid
                }
              });
              request2.then(function (response) {
                _this17.formDataEdit.func2Pid = response.data.id;
                _this17.formDataEdit.managerLineFio = response.data.fio;
                _this17.formDataEdit.managerLineIsObserver = true;
              }, function (response) {
                console.log(response);
                alert('Ошибка!');
              });
            }
          },
          downloadDI: function downloadDI() {
            if (this.diFiles.length > 1) {
              this.isShowDownloadDIModal = true;
            } else if (this.diFiles.length === 1) {
              this.selectDiFile = this.diFiles[0].Id;
              this.downloadDi();
            } else {
              this.downloadDIError = true;
              setTimeout(function () {
                document.getElementById("download-di-error").scrollIntoView();
              });
            }
          }
        }, "sendNotifyChangeApprove", function sendNotifyChangeApprove() {
          console.log('notify');
          var request = BX.ajax.runComponentAction('renins:job_profile', 'sendNotifyChangeApprove', {
            mode: 'class',
            data: {
              messageFields: {
                userID: this.editStageFormData.RESPONSIBLE_USER,
                job: this.formDataEdit.positionName,
                podraz: this.formDataEdit.department,
                func1Name: this.formDataEdit.func1Name,
                func2Name: this.formDataEdit.func1Name,
                costCenter: this.formDataEdit.costCenter,
                linkToProfile: window.location.hostname + '/renins/job_profile/?DRAFT=' + this.formDataEdit.id,
                getToProfileExcel: window.location.hostname + '/renins/job_profile/export.php?ID=' + this.formDataEdit.id
              }
            }
          });
          request.then(function (response) {
            console.log('SUCCESS');
          }, function (response) {
            alert('Ошибка! Уведомление не было отправлено');
          });
        }),
        watch: {
          formDataEdit: {
            handler: function handler(val) {
              console.log('formDataEdit', val);
              console.log('this.errors', this.errors);
              this.revalidateStep(this.currentStep);
              if (this.isSaveButtonDisabled) {
                var _errors = this.errors;
                if (Object.keys(_errors).every(function (key) {
                  return !_errors[key] || Object.keys(_errors[key]).length === 0 || Object.keys(_errors[key]).every(function (key2) {
                    return !_errors[key][key2];
                  });
                })) this.isSaveButtonDisabled = false;
              }
            },
            deep: true
          },
          'formDataEdit.admManager': function formDataEditAdmManager() {
            var _this18 = this;
            setTimeout(function () {
              var _this18$$refs$adm;
              _this18.formDataEdit.admManagerPosition = (_this18$$refs$adm = _this18.$refs.adm) === null || _this18$$refs$adm === void 0 ? void 0 : _this18$$refs$adm.$refs.position.value;
            }, 50);
          },
          'formDataEdit.funcManager': function formDataEditFuncManager() {
            var _this19 = this;
            setTimeout(function () {
              var _this19$$refs$func;
              _this19.formDataEdit.funcManagerPosition = (_this19$$refs$func = _this19.$refs.func) === null || _this19$$refs$func === void 0 ? void 0 : _this19$$refs$func.$refs.position.value;
            }, 50);
          },
          'formDataEdit.costCenter': function formDataEditCostCenter(value) {
            var cost = this.costCenters.find(function (item) {
              return item.value === value;
            });
            if (cost) {
              this.formDataEdit.func1Name = cost.func1Name;
              this.formDataEdit.func1Pid = cost.func1Pid;
              this.formDataEdit.func2Name = cost.func2Name;
              this.formDataEdit.func2Pid = cost.func2Pid;
              this.updateManagers(cost);
            } else {
              this.formDataEdit.func1Name = null;
              this.formDataEdit.func1Pid = null;
              this.formDataEdit.managerExcoFio = null;
              this.formDataEdit.managerExcoIsObserver = false;
              this.formDataEdit.func2Name = null;
              this.formDataEdit.func2Pid = null;
              this.formDataEdit.managerLineFio = null;
              this.formDataEdit.managerLineIsObserver = false;
            }
          },
          'formDataEdit.departmentGoals': function formDataEditDepartmentGoals() {
            if (!this.formDataEdit.departmentGoals || this.formDataEdit.departmentGoals.length === 0) {
              this.formDataEdit.departmentGoals = [];
              this.addDepartmentGoal();
            }
          },
          'formDataEdit.positionGoals': function formDataEditPositionGoals() {
            if (!this.formDataEdit.positionGoals || this.formDataEdit.positionGoals.length === 0) {
              this.formDataEdit.positionGoals = [];
              this.addPositionGoal();
            }
          },
          'formDataEdit.mainDuties': function formDataEditMainDuties() {
            if (!this.formDataEdit.mainDuties || this.formDataEdit.mainDuties.length === 0) {
              this.formDataEdit.mainDuties = [];
              this.addMainDuty();
            }
          },
          'formDataEdit.addDuties': function formDataEditAddDuties() {
            if (!this.formDataEdit.addDuties || this.formDataEdit.addDuties.length === 0) {
              this.formDataEdit.addDuties = [];
              this.addAdditionalDuty();
            }
          },
          'formDataEdit.hasSubs': function formDataEditHasSubs(value) {
            if (value) {
              if (parseInt(this.formDataEdit.subordinatesCount) === 0) this.formDataEdit.subordinatesCount = null;
              if (parseInt(this.formDataEdit.allSubordinatesCount) === 0) ;
              this.formDataEdit.allSubordinatesCount = null;
            } else {
              this.formDataEdit.subordinatesCount = 0;
              this.formDataEdit.allSubordinatesCount = 0;
            }
          },
          'formDataEdit.hasFuncSubs': function formDataEditHasFuncSubs(value) {
            if (value) {
              if (parseInt(this.formDataEdit.funcSubordinatesCount) === 0) this.formDataEdit.funcSubordinatesCount = null;
            } else this.formDataEdit.funcSubordinatesCount = 0;
          },
          'formDataEdit.hasProjectSubs': function formDataEditHasProjectSubs(value) {
            if (value) {
              if (parseInt(this.formDataEdit.projectSubordinatesCount) === 0) this.formDataEdit.projectSubordinatesCount = '';
            } else this.formDataEdit.projectSubordinatesCount = 0;
          },
          'formDataEdit.hasOutsourceSubs': function formDataEditHasOutsourceSubs(value) {
            if (value) {
              if (parseInt(this.formDataEdit.outsourceSubordinatesCount) === 0) this.formDataEdit.outsourceSubordinatesCount = '';
            } else this.formDataEdit.outsourceSubordinatesCount = 0;
          },
          'formDataEdit.competencies': function formDataEditCompetencies() {
            if (!this.formDataEdit.competencies) this.formDataEdit.competencies = {};
          },
          'formDataEdit.premiumMonth': function formDataEditPremiumMonth(value) {
            if (value) {
              this.formDataEdit.premiumQuarter = false;
              this.formDataEdit.premiumHalfyear = false;
              this.formDataEdit.premiumYear = false;
            }
          },
          'formDataEdit.premiumQuarter': function formDataEditPremiumQuarter(value) {
            if (value) {
              this.formDataEdit.premiumMonth = false;
              this.formDataEdit.premiumHalfyear = false;
            }
          },
          'formDataEdit.premiumHalfyear': function formDataEditPremiumHalfyear(value) {
            if (value) {
              this.formDataEdit.premiumMonth = false;
              this.formDataEdit.premiumQuarter = false;
              this.formDataEdit.premiumYear = false;
            }
          },
          'formDataEdit.premiumYear': function formDataEditPremiumYear(value) {
            if (value) {
              this.formDataEdit.premiumMonth = false;
              this.formDataEdit.premiumHalfyear = false;
            }
          },
          'formDataEdit.gradeNotDefined': function formDataEditGradeNotDefined(value) {
            if (value) this.formDataEdit.grade = '';
          },
          'formDataEdit.forkMid': function formDataEditForkMid(value) {
            if (value) {
              this.formDataEdit.forkLow = Math.floor(parseInt(value.replaceAll(' ', '')) * 0.7);
              this.formDataEdit.forkHigh = Math.ceil(parseInt(value.replaceAll(' ', '')) * 1.3);
            } else {
              this.formDataEdit.forkLow = '';
              this.formDataEdit.forkHigh = '';
            }
          },
          'currentStep': function currentStep(value) {
            if (value === 1) this.current_step_section = 'HR OD';
            if (value >= 2 && value <= 13) this.current_step_section = 'Руководитель';
            if (value === 14) this.current_step_section = 'T&D';
            if (value === 15) this.current_step_section = 'C&B';
          },
          'current_step_section': function current_step_section(value) {
            if (value === 'HR OD') this.currentStep = 1;
            if (value === 'Руководитель' && !(this.currentStep >= 2 && this.currentStep <= 13)) this.currentStep = 2;
            if (value === 'T&D') this.currentStep = 14;
            if (value === 'C&B') this.currentStep = 15;
          },
          dragItems: {
            handler: function handler(newItems) {
              // Синхронизируем изменения в dragItems с formData.step4.mainDuties
              this.formData.mainDuties = newItems;
            },
            deep: true // Важно: наблюдаем за изменениями внутри массива
          },

          dragItemsAdd: {
            handler: function handler(newItems) {
              // Синхронизируем изменения в dragItemsAdd с formData.step4.addDuties
              this.formData.addDuties = newItems;
            },
            deep: true // Важно: наблюдаем за изменениями внутри массива
          }
        },

        computed: {
          diFilesSelectList: function diFilesSelectList() {
            return this.diFiles.map(function (item) {
              return {
                'label': item.full_path,
                'value': item.Id
              };
            });
          },
          recommendFormat: function recommendFormat() {
            var a = this.formDataEdit.relationOutClients;
            var b = this.formDataEdit.relationInClients;
            var c = this.formDataEdit.physicService;
            var d = this.formDataEdit.difficultAttractComps;
            var e = this.formDataEdit.workModeSubs;
            if (!a && !b && !c && !d && !e) return '';
            var if1 = [a, b, c].indexOf('Да, нельзя делать удаленно') >= 0 ? 'Офисный' : [a, b, c].indexOf('Да, частично можно делать удаленно') >= 0 ? 'Гибридный' : 'Удаленный';
            if (e === 'Да, есть подчиненные со стандартным режимом') return 'Офисный';else {
              if (e === 'Да, все подчиненные с комбинированным и дистанционным режимом') {
                if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else return 'Гибридный';
              } else {
                if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else {
                  if ([a, b, c].indexOf('Да, частично можно делать удаленно') >= 0) return 'Гибридный';else {
                    if (if1 === 'Удаленный' && d === 'Да') return 'Удаленный';else {
                      if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else {
                        if ([a, b, c].indexOf('Да, частично можно делать удаленно') >= 0) return 'Гибридный';else return 'Удаленный';
                      }
                    }
                  }
                }
              }
            }
            return '';
          }
        }
      }).mount('#job_profile');
    });

}((this.window = this.window || {})));

/* eslint-disable */
(function (exports) {
    'use strict';

    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
    BX.ready(function () {
      BX.BitrixVue.createApp({
        data: function data() {
          return {
            list: [],
            lastCall: 0,
            // время последнего вызова
            throttleTimeout: null,
            currentUserId: null,
            currentUserFio: null,
            loading: false,
            isLoading: false,
            tabs_items: [],
            allCount: 0,
            selected_tab: null,
            sort: 'ID',
            order: 'DESC',
            currentPage: 1,
            perPage: 100,
            rowsCount: 0,
            isOD: false,
            canDownloadSLA: false,
            filledId: null,
            createdCostCenters: [],
            createdFunc1: [],
            createdFunc2: [],
            createdStatuses: [],
            createdIDs: [],
            createdPodraz: [],
            searchCostCenter: '',
            searchFunc1: '',
            searchFunc2: '',
            searchStatus: '',
            searchIDs: '',
            searchPodraz: '',
            mounted: false,
            breadcrumbs: [{
              label: 'Навигатор',
              url: '/renins-kb/'
            }, {
              label: 'Профиль должности '
            }],
            deleting: false,
            delItem: null,
            checkItems: {},
            showDelElementModal: false,
            isShowDelegateModal: false,
            copying: false,
            archive: false,
            showCopyElementModal: false,
            processingItemId: null,
            processingUserId: null,
            processingUsers: [],
            isProcessing: false,
            isGettingToWork: {},
            delegateData: {
              processingUser: null,
              error: null
            },
            showToArchiveElementModal: false,
            listSettings: {
              ID: {
                name: 'ID',
                visible: true
              },
              job: {
                name: 'Должность',
                visible: true
              },
              costCenter: {
                name: 'Кост-центр',
                visible: true
              },
              func1: {
                name: 'Функция 1',
                visible: true
              },
              func2: {
                name: 'Функция 2',
                visible: true
              },
              stage: {
                name: 'Этап',
                visible: true
              },
              nameApproval: {
                name: 'Ответственный',
                visible: false
              },
              status: {
                name: 'Статус',
                visible: true
              },
              approve: {
                name: 'Утвержден',
                visible: false
              }
            },
            isSettingsVisible: false
          };
        },
        created: function created() {
          var cfg = window.cfg_job_profile;
          this.init(cfg);
        },
        mounted: function mounted() {
          this.mounted = true;
          if (this.filledId) this.$refs.alert.add({
            autoClose: true,
            "class": 'success',
            text: 'Профиль должности #' + this.filledId + ' отправлен на проверку OD'
          });
        },
        watch: {
          searchCostCenter: function searchCostCenter(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          searchFunc1: function searchFunc1(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          searchFunc2: function searchFunc2(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          searchStatus: function searchStatus(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          searchIDs: function searchIDs(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          searchPodraz: function searchPodraz(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          },
          selected_tab: function selected_tab(newVal, oldVal) {
            if (newVal !== oldVal) {
              this.applyFilter();
            }
          }
        },
        methods: {
          init: function init(data) {
            var _this = this;
            console.log(data);
            this.tabs_items = data.tabs;
            this.tabs_items.forEach(function (item) {
              return _this.allCount += item.counter;
            });
            var params = this.getUrlParams();
            this.searchCostCenter = params['q1'];
            this.searchFunc1 = params['q2'];
            this.searchFunc2 = params['q3'];
            this.searchStatus = params['q4'];
            this.searchIDs = params['q5'];
            this.searchPodraz = params['q6'];
            this.list = data.list;
            this.currentUserId = data.currentUserId;
            this.currentUserFio = data.currentUserFio;
            this.rowsCount = data.rows_count;
            this.perPage = Number(data.perPage);
            this.sort = data.sort;
            this.order = data.order;
            this.isOD = data.isOD;
            this.canDownloadSLA = data.canDownloadSLA;
            this.filledId = data.filledId;
            this.createdCostCenters = data.createdCostCenters;
            this.createdFunc1 = data.createdFunc1;
            this.createdFunc2 = data.createdFunc2;
            this.createdStatuses = data.createdStatuses;
            this.createdIDs = data.createdIDs;
            this.createdPodraz = data.createdPodraz;
            this.allCount = 0;
            var item = this.tabs_items.find(function (item) {
              return item.value === data.tab;
            });
            if (!item) {
              item = this.tabs_items[0];
            }
            this.selected_tab = item;
            this.currentPage = 1;
            this.loading = false;
            window.addEventListener('scroll', this.handleScroll);
          },
          handleScroll: function handleScroll() {
            // Проверяем, что загрузка не идет и есть еще элементы для загрузки
            if (this.isLoading || this.list.length >= this.rowsCount) return;

            // Вычисляем текущую позицию скролла
            var scrollPosition = window.innerHeight + window.scrollY;
            var pageHeight = document.documentElement.scrollHeight;

            // Если пользователь доскролил до самого конца страницы, вызываем loadMoreItems
            if (scrollPosition >= pageHeight) {
              this.loadMoreItems();
            }
          },
          loadMoreItems: function loadMoreItems() {
            var _this2 = this;
            if (this.loading) return; // Если уже идет загрузка, выходим

            this.isLoading = true;

            // Увеличиваем текущую страницу
            this.currentPage += 1;

            // Загружаем следующую порцию данных
            var request = BX.ajax.runComponentAction('renins:job_profile', 'listLoadRecords', {
              mode: 'class',
              data: {
                sort: this.sort,
                order: this.order,
                pageSize: this.perPage,
                page: this.currentPage,
                tab: this.selected_tab.value,
                q: [this.searchCostCenter, this.searchFunc1, this.searchFunc2, this.searchStatus, this.searchIDs, this.searchPodraz]
              }
            });
            request.then(function (response) {
              // Добавляем новые элементы в существующий список
              _this2.list = _this2.list.concat(response.data.list);
              _this2.rowsCount = response.data.rows_count;
              _this2.createdCostCenters = response.data.createdCostCenters;
              _this2.createdFunc1 = response.data.createdFunc1;
              _this2.createdFunc2 = response.data.createdFunc2;
              _this2.createdStatuses = response.data.createdStatuses;
              _this2.createdPodraz = response.data.createdPodraz;

              // Если загружено меньше элементов, чем perPage, значит, это последняя страница
              if (response.data.list.length < _this2.perPage) {
                // Отключаем обработчик скролла, если больше нечего загружать
                window.removeEventListener('scroll', _this2.handleScroll);
              }
              _this2.isLoading = false;
            }, function (response) {
              console.log('Ошибка при загрузке данных:', response);
              _this2.isLoading = false;
            });
          },
          getUrlParams: function getUrlParams() {
            var urlParams = new URLSearchParams(window.location.search);
            var paramsArray = {};
            var _iterator = _createForOfIteratorHelper(urlParams.entries()),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _step$value = babelHelpers.slicedToArray(_step.value, 2),
                  key = _step$value[0],
                  value = _step$value[1];
                paramsArray[key] = value;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return paramsArray;
          },
          clearFilter: function clearFilter() {
            this.searchCostCenter = '';
            this.searchFunc1 = '';
            this.searchFunc2 = '';
            this.searchStatus = '';
            this.searchIDs = '';
            this.searchPodraz = '';
            this.applyFilter();
          },
          applyFilter: function applyFilter() {
            this.searchCostCenter = this.searchCostCenter ? this.searchCostCenter : '';
            this.searchFunc1 = this.searchFunc1 ? this.searchFunc1 : '';
            this.searchFunc2 = this.searchFunc2 ? this.searchFunc2 : '';
            this.searchStatus = this.searchStatus ? this.searchStatus : '';
            this.searchIDs = this.searchIDs ? this.searchIDs : '';
            this.searchPodraz = this.searchPodraz ? this.searchPodraz : '';
            this.loadList();
            this.setHistory();
          },
          setHistory: function setHistory() {
            var url = "/renins/job_profile/list/?page=".concat(this.currentPage, "&tab=").concat(this.selected_tab.value, "&perPage=").concat(this.perPage) + "&q1=".concat(this.searchCostCenter, "&q2=").concat(this.searchFunc1, "&q3=").concat(this.searchFunc2) + "&q4=".concat(this.searchStatus, "&q5=").concat(this.searchIDs, "&q6=").concat(this.searchPodraz);
            if (window.history.pushState) {
              window.history.pushState({
                page: this.currentPage,
                tab: this.selected_tab.value,
                perPage: this.perPage,
                q1: this.searchCostCenter,
                q2: this.searchFunc1,
                q3: this.searchFunc2,
                q4: this.searchStatus,
                q5: this.searchIDs,
                q6: this.searchPodraz
              }, '', url);
            } else {
              window.location.assign(url);
            }
          },
          redirectToElement: function redirectToElement(item, event) {
            var _item$processingUser;
            var status = item.PROPERTY_STATUS_VALUE;
            var stage = item.PROPERTY_STAGE_VALUE;
            var createdBy = item.CREATED_BY;
            var processingUserId = (_item$processingUser = item.processingUser) === null || _item$processingUser === void 0 ? void 0 : _item$processingUser.id;
            this.setHistory();
            if ((item.STATUS === 'Черновик' || item.STATUS === 'Отозван' || item.STATUS === 'На доработке') && (this.currentUserId === createdBy || this.currentUserId === processingUserId)) {
              window.location.href = '/renins/job_profile/?DRAFT=' + item.ID;
            } else {
              window.location.href = '/renins/job_profile/' + item.ID + '/';
            }
          },
          isSort: function isSort(sort, order) {
            return this.sort === sort && this.order === order;
          },
          setSort: function setSort(sort) {
            if (this.sort === sort) {
              this.order = this.order == 'ASC' ? 'DESC' : 'ASC';
            } else {
              this.sort = sort;
              this.order = 'ASC';
            }
            this.loadList();
          },
          loadList: function loadList() {
            var _this3 = this;
            this.loading = true;
            this.currentPage = 1; // Сбрасываем текущую страницу
            this.list = []; // Очищаем список

            var request = BX.ajax.runComponentAction('renins:job_profile', 'listLoadRecords', {
              mode: 'class',
              data: {
                sort: this.sort,
                order: this.order,
                pageSize: this.perPage,
                page: this.currentPage,
                tab: this.selected_tab.value,
                q: [this.searchCostCenter, this.searchFunc1, this.searchFunc2, this.searchStatus, this.searchIDs, this.searchPodraz]
              }
            });
            request.then(function (response) {
              _this3.rowsCount = response.data.rows_count;
              var item = _this3.tabs_items.find(function (item) {
                return item.value === _this3.selected_tab.value;
              });
              if (item.counter !== _this3.rowsCount) item.counter = _this3.rowsCount;else item = _this3.tabs_items[0];
              _this3.selected_tab = item;
              _this3.list = response.data.list;
              _this3.createdCostCenters = response.data.createdCostCenters;
              _this3.createdFunc1 = response.data.createdFunc1;
              _this3.createdFunc2 = response.data.createdFunc2;
              _this3.createdStatuses = response.data.createdStatuses;
              _this3.createdIDs = response.data.createdIDs;
              _this3.createdPodraz = response.data.createdPodraz;
              _this3.checkItems = {};

              // Если элементов меньше, чем perPage, отключаем обработчик скролла
              if (_this3.list.length < _this3.perPage) {
                window.removeEventListener('scroll', _this3.handleScroll);
              } else {
                // Иначе добавляем обработчик скролла
                window.addEventListener('scroll', _this3.handleScroll);
              }
              _this3.loading = false;
            }, function (response) {
              console.log('Ошибка при загрузке данных:', response);
              _this3.loading = false;
            });
          },
          showDelModal: function showDelModal(id) {
            this.delItem = id;
            this.showDelElementModal = true;
          },
          downloadExcel: function downloadExcel() {
            var _this4 = this;
            var itemsToExport = Object.keys(this.checkItems).filter(function (id) {
              return _this4.checkItems[id];
            });
            var link = document.createElement('a');
            link.setAttribute('href', '/renins/job_profile/exportAny.php?ID=' + itemsToExport);
            //link.setAttribute('download', 'report.xlsx');
            link.click();
          },
          removeItems: function removeItems() {
            var _this5 = this;
            this.deleting = true;
            var itemsToDeleting = Object.keys(this.checkItems).filter(function (id) {
              return _this5.checkItems[id];
            });
            var request = BX.ajax.runComponentAction('renins:job_profile', 'removeItems', {
              mode: 'class',
              data: {
                ids: itemsToDeleting,
                deleting: this.selected_tab.value === 'trash' ? 'Y' : 'N'
              }
            });
            request.then(function (response) {
              console.log('response', response);
              if (!response.data.del) alert('Не все заявки удалены!');
              var item = _this5.tabs_items.find(function (item) {
                return item.value === 'trash';
              });
              if (item) item.counter = response.data.count;
              _this5.checkItems = {};
              _this5.showDelElementModal = false;
              _this5.deleting = false;
              _this5.loadList();
            }, function (response) {
              alert('Ошибка!');
              this.deleting = false;
            });
          },
          copyItems: function copyItems() {
            var _this6 = this;
            this.copying = true;
            var itemsToCopy = Object.keys(this.checkItems).filter(function (id) {
              return _this6.checkItems[id];
            });
            var request = BX.ajax.runComponentAction('renins:job_profile', 'copyItems', {
              mode: 'class',
              data: {
                ids: itemsToCopy
              }
            });
            request.then(function (response) {
              console.log('response', response);
              _this6.checkItems = {};
              _this6.showCopyElementModal = false;
              _this6.copying = false;
              _this6.loadList();
            }, function (response) {
              alert('Ошибка!');
              this.copying = false;
            });
          },
          getToWork: function getToWork(id) {
            var _this7 = this;
            // Взять заявку в работу
            var icon = $('[data-id=' + id + '] .renins-icon').addClass('color-gray');
            var request = BX.ajax.runComponentAction('renins:job_profile', 'getToWork', {
              mode: 'class',
              data: {
                id: id
              }
            });
            request.then(function () {
              icon.removeClass('color-gray');
              _this7.list = _this7.list.map(function (item) {
                if (item.ID === id) {
                  item.processingUser = {
                    id: _this7.currentUserId,
                    fio: _this7.currentUserFio
                  };
                  item.STATUS_CLASS = 'success';
                  item.STATUS = 'В работе';
                }
                return item;
              });
              console.log(_this7.list);
            }, function (response) {
              console.log(response);
              icon.removeClass('color-gray');
              alert('Ошибка!');
            });
          },
          delegate: function delegate() {
            var _this8 = this;
            // Делегировать заявку сотруднику

            if (!this.delegateData.processingUser) {
              this.delegateData.error = 'Выберите сотрудника';
              return false;
            } else {
              this.delegateData.error = null;
            }
            this.isProcessing = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'delegate', {
              mode: 'class',
              data: {
                id: this.processingItemId,
                userId: this.delegateData.processingUser
              }
            });
            request.then(function (response) {
              _this8.isProcessing = false;
              _this8.isShowDelegateModal = false;
              _this8.delegateData.processingUser = null;
              _this8.list = _this8.list.map(function (item) {
                if (item.ID === _this8.processingItemId) {
                  item.deleted = true;
                  item.processingUser = {
                    id: response.data.id,
                    fio: response.data.fio
                  };
                }
                return item;
              });
              var item = _this8.tabs_items.find(function (item) {
                return item.value === _this8.selected_tab.value;
              });
              if (item) item.counter -= 1;
            }, function (response) {
              console.log(response);
              this.isProcessing = false;
              alert('Ошибка!');
            });
          },
          toArchive: function toArchive() {
            var _this9 = this;
            this.archive = true;
            var itemsArchive = Object.keys(this.checkItems).filter(function (id) {
              return _this9.checkItems[id];
            });
            var request = BX.ajax.runComponentAction('renins:job_profile', 'addProfileToArchive', {
              mode: 'class',
              data: {
                elementIdS: itemsArchive
              }
            });
            request.then(function (response) {
              console.log('response', response);
              _this9.checkItems = {};
              _this9.showToArchiveElementModal = false;
              _this9.archive = false;
              _this9.loadList();
            }, function (response) {
              alert('Ошибка!');
              this.archive = false;
            });
          },
          toggleAllItems: function toggleAllItems(value) {
            var _this10 = this;
            var list = this.list || [];
            list.forEach(function (item) {
              _this10.$set(_this10.checkItems, item.ID, value);
            });
          },
          toggleColumnVisibility: function toggleColumnVisibility(columnName) {
            var column = this.listSettings.find(function (setting) {
              return setting.name === columnName;
            });
            if (column) {
              column.visible = !column.visible;
            }
          },
          toggleSettings: function toggleSettings() {
            this.isSettingsVisible = !this.isSettingsVisible;
            if (this.isSettingsVisible) {
              // Добавляем обработчик клика вне элемента
              document.addEventListener('click', this.handleClickOutside);
            } else {
              // Убираем обработчик, если блок скрыт
              document.removeEventListener('click', this.handleClickOutside);
            }
          },
          handleClickOutside: function handleClickOutside(event) {
            var settingsBlock = this.$el.querySelector('.settings-block');
            var button = this.$el.querySelector('.renins-button');
            // Проверяем, был ли клик вне блока и кнопки
            if (settingsBlock && !settingsBlock.contains(event.target) && !button.contains(event.target)) {
              this.isSettingsVisible = false;
              document.removeEventListener('click', this.handleClickOutside);
            }
          }
        },
        computed: {
          filteredProcessingUsers: function filteredProcessingUsers() {
            var _this11 = this;
            return this.processingUsers.filter(function (item) {
              return parseInt(item.value) !== parseInt(_this11.processingUserId);
            });
          },
          canDeleting: function canDeleting() {
            var _this12 = this;
            // Если ничего не выбрано, то нельзя удалить
            if (Object.keys(this.checkItems).length === 0 || Object.values(this.checkItems).indexOf(true) < 0) return false;

            // Если выбраны те, которые можно удалить
            return this.list.every(function (item) {
              return !_this12.checkItems.hasOwnProperty(item.ID) || !_this12.checkItems[item.ID] || item.canDelete;
            });
          },
          canCopying: function canCopying() {
            // Если ничего не выбрано, то нельзя дублировать
            if (Object.keys(this.checkItems).length === 0 || Object.values(this.checkItems).indexOf(true) < 0) return false;
            // Проверяем, что выбран только один элемент
            var selectedItemsCount = Object.values(this.checkItems).filter(function (checked) {
              return checked;
            }).length;
            if (selectedItemsCount !== 1) {
              return false;
            }
            return true;
          },
          canArchive: function canArchive() {
            // Если ничего не выбрано, то нельзя архивировать
            if (Object.keys(this.checkItems).length === 0 || Object.values(this.checkItems).indexOf(true) < 0) return false;
            return true;
          },
          canGetToWork: function canGetToWork() {
            return this.list.some(function (item) {
              return item.canGetToWork;
            });
          },
          isAnyCheckboxSelected: function isAnyCheckboxSelected() {
            return Object.values(this.checkItems).some(function (checked) {
              return checked;
            });
          },
          isAllChecked: {
            get: function get() {
              var _this13 = this;
              var list = this.list || [];
              return list.length > 0 && list.every(function (item) {
                return _this13.checkItems[item.ID];
              });
            },
            set: function set(value) {
              this.toggleAllItems(value);
            }
          },
          isIndeterminate: function isIndeterminate() {
            var _this14 = this;
            var list = this.list || [];
            return !this.isAllChecked && list.some(function (item) {
              return _this14.checkItems[item.ID];
            });
          },
          visibleColumns: function visibleColumns() {
            return this.listSettings.filter(function (setting) {
              return setting.visible;
            });
          }
        }
      }).mount('#job_profile');
    });

}((this.window = this.window || {})));

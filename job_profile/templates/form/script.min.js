/* eslint-disable */
(function (exports) {
    'use strict';

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    BX.ready(function () {
      BX.BitrixVue.createApp({
        data: function data() {
          return {
            dragItems: [],
            // Drag-and-Drop step4
            dragItemsAdd: [],
            // Drag-and-Drop step4
            currentUserId: null,
            currentStep: 1,
            step_sections: ["HR OD", "Руководитель", "T&D", "C&B"],
            current_step_section: "HR OD",
            breadcrumbs: [{
              label: 'HR-сервисы',
              url: '/renins-kb/'
            }, {
              label: 'Профиль должности',
              url: '/renins/job_profile/list/'
            }],
            initiator: null,
            status: null,
            statusId: null,
            statusClass: null,
            stage: null,
            stageId: null,
            createDate: null,
            updateDate: null,
            processingUser: {},
            processingUsers: {},
            work: null,
            roleSLA: null,
            editStageFormData: {
              ID: '',
              TITLE: '',
              RESPONSIBLE_USER: ''
            },
            allowedChangeStages: false,
            updatingStages: {},
            send_comment: null,
            isShowStageModal: false,
            isShowDelegateModal: false,
            isShowSendModal: false,
            autoSaveDelay: 1000,
            isSaving: false,
            isAutoSaving: false,
            isSending: false,
            isProcessing: false,
            revoke_comment: null,
            isRevoking: false,
            isShowRevokeModal: false,
            isShowSuccessfullyRevokedModal: false,
            isDeleting: false,
            isShowDeleteModal: false,
            isShowSuccessfullyArchivedModal: false,
            collapsed: {
              stages: true
            },
            formDataCopy: {},
            formData: {
              step1: {
                id: '',
                positionName: null,
                costCenter: null,
                func1Name: null,
                func1Pid: null,
                managerExcoFio: null,
                managerExcoIsObserver: false,
                func2Name: null,
                func2Pid: null,
                managerLineFio: null,
                managerLineIsObserver: false,
                department: null,
                branch: null,
                location: null,
                admManager: null,
                admManagerPosition: null,
                funcManager: null,
                funcManagerPosition: null,
                needAdmApprove: false,
                needFuncApprove: false,
                delegate: null,
                addApprovers: [],
                headAdmManager: null,
                sendComment: '',
                addObservers: ['']
              },
              step2: {
                hasSubs: false,
                hasFuncSubs: false,
                hasProjectSubs: false,
                hasOutsourceSubs: false,
                subordinatesCount: null,
                allSubordinatesCount: null,
                subordinatesComment: null,
                funcSubordinatesCount: null,
                projectSubordinatesCount: null,
                outsourceSubordinatesCount: null,
                outsourceComment: null,
                isManager: false,
                isShiftSchedule: false,
                isItinerantWork: false,
                fieldPercent: null,
                isRemote: false,
                calculator: false,
                relationOutClients: null,
                relationInClients: null,
                physicService: null,
                difficultAttractComps: null,
                workModeSubs: null,
                schedule: null,
                distantPercent: null,
                diffModeComment: null
              },
              step3: {
                departmentGoals: ['', ''],
                positionGoals: ['', '']
              },
              step4: {
                isShortTerm: false,
                isMediumTerm: false,
                isLongTerm: false,
                mainDuties: [{
                  duty: '',
                  result: '',
                  id: ''
                }, {
                  duty: '',
                  result: '',
                  id: ''
                }],
                addDuties: [{
                  duty: '',
                  result: '',
                  id: ''
                }, {
                  duty: '',
                  result: '',
                  id: ''
                }]
              },
              step5: {
                positionContribution: null,
                positionContributionDescription: null
              },
              step6: {
                decisions: null
              },
              step7: {
                financialResultGeneration: null,
                EBIT: null,
                WP: null
              },
              step8: {
                isNotInvolvedInBudgetManagement: null,
                isControlTargetBudget: null,
                isPrepareProposalsToSpendBudget: null,
                hasAuthorityToMakeDecisions: null,
                CnBSum: null,
                nonCnBSum: null,
                validationTriggered: false
              },
              step9: {
                levelOfInnovativeness: null
              },
              step10: {
                interactionCircleWithinTheCompany: null,
                b2bClients: [],
                b2cClients: [],
                otherClients: [],
                namesOfExternalOrganizations: null,
                isTransmittingInformation: null,
                isConsulting: null,
                isInteraction: null,
                isParticipationNegotiations: null,
                isAuthoritativeInfluence: null,
                isStrategicNegotiations: null,
                amountOfCommunications: null
              },
              step11: {
                minimumLevelOfEducation: null,
                Qualification: null,
                Certification: null,
                professionalStandard: null
              },
              step12: {
                knowledgeOfMethods: null,
                knowledgeOfComputerPrograms: null,
                knowledgeOfSituation: null,
                businessQualities: null,
                englishLevel: null,
                languages: [{
                  name: '',
                  level: ''
                }]
              },
              step13: {
                managementExperience: null,
                professionalExperience: null,
                typeOfExperience: null,
                fieldOfActivity: null,
                professionalExperienceYears: null,
                typeOfManagementExperience: null,
                fieldOfManagementActivity: null,
                managementExperienceYears: null
              },
              step14: {
                checksCompetencies: {},
                competencies: {
                  q1: null,
                  q2: null,
                  q3: null,
                  q4: null,
                  q5: null,
                  q6: null,
                  q7: null,
                  q8: null,
                  q9: null,
                  q10: null,
                  q11: null,
                  q12: null,
                  q13: null,
                  q14: null,
                  q15: null,
                  q16: null,
                  q17: null,
                  q18: null,
                  q19: null,
                  q20: null,
                  q21: null,
                  q22: null,
                  q23: null,
                  q25: null,
                  q26: null,
                  q27: null,
                  q28: null,
                  q29: null
                }
              },
              step15: {
                review: [{
                  name: '',
                  code: ''
                }],
                premiumMonth: false,
                premiumQuarter: false,
                premiumHalfyear: false,
                premiumYear: false,
                premiumPercent: null,
                grade: null,
                gradeNotDefined: null,
                forkLow: null,
                forkMid: null,
                forkHigh: null
              }
            },
            costCenters: [],
            departments: [],
            branches: [],
            locations: [],
            b2bClients: [{
              value: 'Крупные',
              label: 'Крупные'
            }, {
              value: 'Средние',
              label: 'Средние'
            }, {
              value: 'Мелкие',
              label: 'Мелкие'
            }],
            b2cClients: [{
              value: 'VIP',
              label: 'VIP'
            }, {
              value: 'Средние',
              label: 'Средние'
            }, {
              value: 'Мелкие',
              label: 'Мелкие'
            }],
            otherClients: [{
              value: 'Гос. органы',
              label: 'Гос. органы'
            }, {
              value: 'Общественные организации',
              label: 'Общественные организации'
            }, {
              value: 'Партнеры',
              label: 'Партнеры'
            }, {
              value: 'Дилеры',
              label: 'Дилеры'
            }, {
              value: 'Агенты',
              label: 'Агенты'
            }],
            englishLevels: [{
              value: 'Не обязателен',
              label: 'Не обязателен'
            }, {
              value: 'Elementary (A1)',
              label: 'Elementary (A1)'
            }, {
              value: 'Pre-intermediate (A2)',
              label: 'Pre-intermediate (A2)'
            }, {
              value: 'Intermediate (B1)',
              label: 'Intermediate (B1)'
            }, {
              value: 'Upper-intermediate (B2)',
              label: 'Upper-intermediate (B2)'
            }, {
              value: 'Advanced (C1)',
              label: 'Advanced (C1)'
            }, {
              value: 'Proficiency (C2)',
              label: 'Proficiency (C2)'
            }],
            competencesQuestions: [{
              id: 'q1',
              text: "Учитывает мотивы, чувства и потребности окружающих"
            }, {
              id: 'q2',
              text: "Предвосхищает потребности"
            }, {
              id: 'q3',
              text: "Неравнодушен к проблемам других, оказывает помощь"
            }, {
              id: 'q4',
              text: "Выходит за рамки инструкций"
            }, {
              id: 'q5',
              text: "Оперативно реагирует на запросы, выполняет взятые обязательства"
            }, {
              id: 'q6',
              text: "Озвучивает мысли ясно и понятно"
            }, {
              id: 'q7',
              text: "Объясняет причины отказа, предлагает решения"
            }, {
              id: 'q8',
              text: "Качественно анализирует и синтезирует информацию"
            }, {
              id: 'q9',
              text: "Опирается на данные и аналитику"
            }, {
              id: 'q10',
              text: "Предотвращает возможные риски"
            }, {
              id: 'q11',
              text: "Пилотирует решения"
            }, {
              id: 'q12',
              text: "Честен и открыт с окружающими"
            }, {
              id: 'q13',
              text: "Настойчив в достижении цели"
            }, {
              id: 'q14',
              text: "Берет ответственность за решения"
            }, {
              id: 'q15',
              text: "Действует для изменения ситуации"
            }, {
              id: 'q16',
              text: "Развивается и самосовершенствуется"
            }, {
              id: 'q17',
              text: "Ставит перед собой новые амбициозные цели"
            }, {
              id: 'q18',
              text: "Изучает новые технологии"
            }, {
              id: 'q19',
              text: "Внедряет новые подходы"
            }, {
              id: 'q20',
              text: "Привлекает в команду сильных людей"
            }, {
              id: 'q21',
              text: "Вносит предложения по улучшению процессов и регламентов смежных подразделений"
            }, {
              id: 'q22',
              text: "Ориентируется на цели и интересы компании"
            }, {
              id: 'q23',
              text: "Сотрудничает с коллегами, нацелен на общий результат"
            }, {
              id: 'q24',
              text: "Учится на ошибках"
            }, {
              id: 'q25',
              text: "Поддерживает и помогает другим в развитии"
            }, {
              id: 'q26',
              text: "Дает обратную связь"
            }, {
              id: 'q27',
              text: "Принимает обратную связь"
            }, {
              id: 'q28',
              text: "Уважает время и ресурсы коллег"
            }, {
              id: 'q29',
              text: "Своевременно отвечает на вопросы окружающих"
            }],
            allowedDelegateFilling: false,
            isFillingStage: false,
            isAccessPage: false,
            isOD: false,
            version: 0,
            requiredFields: [],
            errors: {},
            stepsWithErrors: [],
            validatedSteps: []
          };
        },
        created: function created() {
          var cfg = window.cfg_job_profile;
          this.init(cfg);
          this.getItemsList();
        },
        methods: {
          init: function init(data) {
            console.log('data', data);
            this.currentUserId = data.currentUserId;
            this.allowedDelegateFilling = data.allowedDelegateFilling;
            this.isAccessPage = data.isAccessPage;
            this.isFillingStage = data.isOD ? false : data.isFillingStage;
            this.isOD = data.isOD;
            this.initiator = data.initiator;
            this.status = data.status;
            this.statusId = data.statusId;
            this.statusClass = data.statusClass;
            this.stage = data.stage;
            this.stageId = data.stageId;
            this.stages = data.stages;
            this.processingUser = data.processingUser;
            this.processingUsers = data.processingUsers;
            this.createDate = data.createDate;
            this.updateDate = data.updateDate;
            this.modelRole = data.modelRole;
            this.work = data.work;
            this.roleSLA = data.roleSLA;
            this.allowedChangeStages = data.allowedChangeStages;
            this.costCenters = data.costCenters;
            this.departments = data.departments;
            this.branches = data.branches;
            this.locations = data.locations;
            this.requiredFields = data.requiredFields;
            if (this.isFillingStage) {
              // Заполнение формы осуществляется со второго шага
              this.currentStep = 2;
            }
            this.formData.step1.id = data.id;
            if (this.formData.step1.id) this.breadcrumbs.push({
              label: this.formData.step1.id
            });

            // Заполнение данных формы ранее сохранёнными данными
            for (var step in this.formData) {
              for (var field in this.formData[step]) {
                if (data.formData.hasOwnProperty(field)) {
                  if (step === 'step14' && !data.formData[field]) {
                    continue;
                  }
                  this.formData[step][field] = data.formData[field];
                  if ((field === 'addApprovers' || field === 'addObservers') && !data.formData[field]) {
                    this.formData[step][field] = [];
                  }
                  if ((field === 'departmentGoals' || field === 'positionGoals') && !data.formData[field]) {
                    this.formData[step][field] = ['', ''];
                  }
                  if ((field === 'mainDuties' || field === 'addDuties') && (!data.formData[field] || data.formData[field].length === 0)) {
                    this.formData[step][field] = [{
                      duty: '',
                      result: ''
                    }, {
                      duty: '',
                      result: ''
                    }];
                  }
                  if (field === 'languages' && !data.formData[field]) {
                    this.formData[step][field] = [{
                      name: '',
                      level: ''
                    }];
                  }
                  if (field === 'review' && !data.formData[field]) {
                    this.formData[step][field] = [{
                      name: '',
                      code: ''
                    }];
                  }
                }
              }
            }
            if (this.currentUserId === this.formData.step1.delegate) this.step_sections.pop();
            for (var comp in this.formData.step14.competencies) {
              if (this.formData.step14.competencies[comp]) this.formData.step14.checksCompetencies[comp] = true;
            }
            if (this.formData.step12.languages.length < 1) {
              this.formData.step12.languages = [{
                name: '',
                level: ''
              }];
            }
            if (this.formData.step15.review.length < 1) {
              this.formData.step15.review = [{
                name: '',
                code: ''
              }];
            }
            this.copyFormForEdit();
          },
          //--methods Drag-and-Drop--
          getItemsList: function getItemsList() {
            if (this.formData.step4.mainDuties && !Array.isArray(this.formData.step4.mainDuties)) {
              this.formData.step4.mainDuties = Object.values(this.formData.step4.mainDuties);
            }
            var arrRes = [];
            this.formData.step4.mainDuties.forEach(function (elem, ind) {
              var promRes = {
                'duty': elem.duty,
                'result': elem.result,
                'id': ind
              };
              arrRes.push(promRes);
            });
            this.dragItems = arrRes;
            if (this.formData.step4.addDuties && !Array.isArray(this.formData.step4.addDuties)) {
              this.formData.step4.addDuties = Object.values(this.formData.step4.addDuties);
            }
            arrRes = [];
            this.formData.step4.addDuties.forEach(function (elem, ind) {
              var promRes = {
                'duty': elem.duty,
                'result': elem.result,
                'id': ind
              };
              arrRes.push(promRes);
            });
            this.dragItemsAdd = arrRes;
          },
          handleDropEvent: function handleDropEvent(newItems, targetIndex) {
            this.dragItems = newItems;
          },
          handleDropEventAdd: function handleDropEventAdd(newItems, targetIndex) {
            this.dragItemsAdd = newItems;
          },
          //--end
          getFullForm: function getFullForm(val) {
            val = val ? val : this.formData;
            return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, val.step1), val.step2), val.step3), val.step4), val.step5), val.step6), val.step7), val.step8), val.step9), val.step10), val.step11), val.step12), val.step13), val.step14), val.step15);
          },
          copyFormForEdit: function copyFormForEdit() {
            // Копирование данных формы для автосохранения
            var formData = this.getFullForm();
            this.formDataCopy = JSON.parse(JSON.stringify(formData));
          },
          toggle: function toggle(value) {
            this.$set(this.collapsed, value, !Boolean(this.collapsed[value]));
            console.log(this.collapsed[value]);
          },
          isCollapsed: function isCollapsed(value) {
            if (!this.collapsed.hasOwnProperty(value)) return false;
            return Boolean(this.collapsed[value]);
          },
          isStageUpdating: function isStageUpdating(id) {
            return Boolean(this.updatingStages[id]);
          },
          showStageModal: function showStageModal(stage) {
            this.editStageFormData.ID = stage.ID;
            this.editStageFormData.RESPONSIBLE_USER = stage.RESPONSIBLE_USER;
            this.isShowStageModal = true;
          },
          updateResponsibleUser: function updateResponsibleUser(stageId, value) {
            var _this = this;
            this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, true));
            var request = BX.ajax.runComponentAction('renins:job_profile', 'updateStage', {
              mode: 'class',
              data: {
                entityId: this.formData.step1.id,
                stageId: stageId,
                data: {
                  RESPONSIBLE_USER: value
                }
              }
            });
            request.then(function (response) {
              console.log(response);
              _this.stages = response.data;

              // Обновим поле с ответственным
              var stage = _this.stages.find(function (item) {
                return item.ID === stageId;
              });
              if (stage.NAME === _this.stage) _this.processingUser = {
                id: value,
                fio: stage.RESPONSIBLE_USER_NAME
              };
              _this.updatingStages = _objectSpread(_objectSpread({}, _this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              _this.isShowStageModal = false;
              _this.sendNotifyChangeApprove();
            }, function (response) {
              console.log(response);
              this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              alert('Ошибка!');
            });
          },
          toggleChecked: function toggleChecked(stageId, value) {
            var _this2 = this;
            this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, true));
            var request = BX.ajax.runComponentAction('renins:job_profile', 'updateStage', {
              mode: 'class',
              data: {
                entityId: this.formData.step1.id,
                stageId: stageId,
                data: {
                  CHECKED: value ? 'Y' : 'N'
                }
              }
            });
            request.then(function (response) {
              console.log(response);
              _this2.stages = response.data;
              _this2.updatingStages = _objectSpread(_objectSpread({}, _this2.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
            }, function (response) {
              console.log(response);
              this.updatingStages = _objectSpread(_objectSpread({}, this.updatingStages), {}, babelHelpers.defineProperty({}, stageId, false));
              alert('Ошибка!');
            });
          },
          nextStep: function nextStep() {
            if (this.currentStep === 8) {
              this.formData.step8.validationTriggered = true;
            }
            // Валидация полей для текущего шага
            if (!this.validateStep(this.currentStep)) {
              return;
            }
            this.currentStep++;
            document.getElementById("group-button").scrollIntoView();
            this.formData.step8.validationTriggered = false;
          },
          getStepClass: function getStepClass(i) {
            if (this.stepHasErrors(i)) {
              return {
                warning: true
              };
            }
            return {
              active: this.currentStep === i,
              success: this.validatedSteps.includes(i)
            };
          },
          addDepartmentGoal: function addDepartmentGoal() {
            this.formData.step3.departmentGoals.push('');
          },
          addPositionGoal: function addPositionGoal() {
            this.formData.step3.positionGoals.push('');
          },
          addMainDuty: function addMainDuty() {
            this.formData.step4.mainDuties.push({
              duty: '',
              result: '',
              id: ''
            });
            this.dragItems.push({
              duty: '',
              result: '',
              id: ''
            });
          },
          addAdditionalDuty: function addAdditionalDuty() {
            this.formData.step4.addDuties.push({
              duty: '',
              result: '',
              id: ''
            });
            this.dragItemsAdd.push({
              duty: '',
              result: '',
              id: ''
            });
          },
          addLanguage: function addLanguage() {
            this.formData.step12.languages.push({
              name: '',
              level: ''
            });
          },
          addReview: function addReview() {
            this.formData.step15.review.push({
              name: '',
              code: ''
            });
          },
          addApprover: function addApprover() {
            this.formData.step1.addApprovers.push('');
          },
          removeApprover: function removeApprover(index) {
            this.formData.step1.addApprovers.splice(index, 1);
          },
          addObserver: function addObserver() {
            this.formData.step1.addObservers.push('');
          },
          removeObserver: function removeObserver(index) {
            this.formData.step1.addObservers.splice(index, 1);
          },
          getDifData: function getDifData(val) {
            var _this3 = this;
            var formData = this.getFullForm(val);

            // Фильтруем измененные поля
            return Object.keys(this.formDataCopy).reduce(function (acc, key) {
              if (['addApprovers', 'addObservers', 'b2bClients', 'b2cClients', 'departmentGoals', 'otherClients', 'positionGoals', 'checksCompetencies'].indexOf(key) >= 0) {
                if (_this3.formDataCopy[key].length !== formData[key].length) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                for (var i = 0; i < _this3.formDataCopy[key].length; i++) {
                  if (!formData[key].hasOwnProperty(i) || _this3.formDataCopy[key][i] !== formData[key][i]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                }
              } else if (['addDuties', 'review', 'languages', 'mainDuties'].indexOf(key) >= 0) {
                if (!_this3.isArrayEmpty(_this3.formDataCopy[key]) && !_this3.isArrayEmpty(formData[key]) && _this3.formDataCopy[key].length !== formData[key].length) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                for (var _i = 0; _i < _this3.formDataCopy[key].length; _i++) {
                  if (!formData[key].hasOwnProperty(_i)) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                  for (var item in _this3.formDataCopy[key][_i]) {
                    if (_this3.formDataCopy[key][_i][item] !== formData[key][_i][item]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                  }
                }
              } else if (key === 'competencies') {
                for (var comp in _this3.formDataCopy[key]) {
                  if (_this3.formDataCopy[key][comp] !== formData[key][comp]) return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
                }
              } else if (_this3.formDataCopy[key] !== formData[key]) {
                return _objectSpread(_objectSpread({}, acc), {}, babelHelpers.defineProperty({}, key, formData[key]));
              }
              return acc;
            }, {});
          },
          isArrayEmpty: function isArrayEmpty(ar) {
            for (var i = 0; i < ar.length; i++) {
              for (var item in ar[i]) {
                if (ar[i][item].length > 0) return false;
              }
            }
            return true;
          },
          saveAndRedirect: function saveAndRedirect() {
            var _this4 = this;
            this.saveForm().then(function () {
              _this4.redirectBack();
            });
          },
          saveForm: function saveForm(modifier) {
            var _this5 = this;
            this.isSaving = true;
            this.formData.step4.mainDuties = this.dragItems;
            this.formData.step4.addDuties = this.dragItemsAdd;
            if (!this.formData.step2.hasSubs) {
              this.formData.step2.subordinatesCount = 0;
              this.formData.step2.allSubordinatesCount = 0;
            }
            if (!this.formData.step2.hasFuncSubs) this.formData.step2.funcSubordinatesCount = 0;
            if (!this.formData.step2.hasProjectSubs) this.formData.step2.projectSubordinatesCount = 0;
            if (!this.formData.step2.hasOutsourceSubs) this.formData.step2.outsourceSubordinatesCount = 0;
            var formData = this.getFullForm();
            formData[modifier] = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'save', {
              mode: 'class',
              data: {
                formData: formData
              }
            });
            return new Promise(function (resolve, reject) {
              request.then(function (response) {
                _this5.formData.step1.id = response.data.formData.id;
                if (_this5.breadcrumbs.length === 3) _this5.breadcrumbs.pop();
                _this5.breadcrumbs.push({
                  label: 'ID ' + _this5.formData.step1.id
                });
                window.history.replaceState(null, null, '/renins/job_profile/?DRAFT=' + _this5.formData.step1.id);
                console.log(response);
                _this5.isSaving = false;
                resolve();
              }, function (response) {
                console.log(response);
                this.isSaving = false;
                alert('Ошибка!');
                reject();
              });
            });
          },
          sendNotifyChangeApprove: function sendNotifyChangeApprove() {
            var request = BX.ajax.runComponentAction('renins:job_profile', 'sendNotifyChangeApprove', {
              mode: 'class',
              data: {
                messageFields: {
                  userID: this.editStageFormData.RESPONSIBLE_USER,
                  job: this.formData.step1.positionName,
                  podraz: this.formData.step1.department,
                  func1Name: this.formData.step1.func1Name,
                  func2Name: this.formData.step2.func1Name,
                  costCenter: this.formData.step1.costCenter,
                  linkToProfile: window.location.hostname + '/renins/job_profile/?DRAFT=' + this.step1.id,
                  getToProfileExcel: window.location.hostname + '/renins/job_profile/export.php?ID=' + this.step1.id
                }
              }
            });
            request.then(function (response) {
              return true;
            }, function (response) {
              alert('Ошибка! Уведомление не было отправлено');
            });
          },
          send: function send() {
            var _this6 = this;
            // Валидация формы (14 шагов)
            this.stepsWithErrors = [];
            var steps = {
              1: 'Должность',
              2: 'Параметры',
              3: 'Цели',
              4: 'Обязанности',
              5: 'Вклад',
              6: 'Полномочия',
              7: 'Финансовый результат',
              8: 'Бюджет',
              9: 'Инновационность',
              10: 'Коммуникации',
              11: 'Требования',
              12: 'Навыки',
              13: 'Опыт',
              14: 'Компетенции'
            };
            var formHasErrors = false;
            for (var i = 1; i <= 14; i++) {
              if (!this.validateStep(i)) {
                formHasErrors = true;
                if (steps.hasOwnProperty(i)) {
                  this.stepsWithErrors.push(steps[i]);
                }
              }
            }
            if (formHasErrors) {
              return;
            }
            this.isSending = true;
            this.saveForm('sendToApprove').then(function () {
              console.log('send');
              var request = BX.ajax.runComponentAction('renins:job_profile', 'send', {
                mode: 'class',
                data: {
                  id: _this6.formData.step1.id,
                  comment: _this6.send_comment
                }
              });
              request.then(function (response) {
                _this6.redirectBack('filled');
              }, function (response) {
                _this6.isSending = false;
                alert('Ошибка!');
              });
            });
          },
          saveAndDelegate: function saveAndDelegate() {
            var _this7 = this;
            this.saveForm().then(function () {
              _this7.delegate();
            });
          },
          delegate: function delegate() {
            var _this8 = this;
            // Делегировать 2 этап сотруднику
            this.isProcessing = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'delegate', {
              mode: 'class',
              data: {
                id: this.formData.step1.id,
                userId: this.formData.step1.delegate
              }
            });
            request.then(function () {
              // this.isProcessing = false;
              _this8.redirectBack();
            }, function (response) {
              console.log(response);
              this.isProcessing = false;
              alert('Ошибка!');
            });
          },
          revoke: function revoke() {
            var _this9 = this;
            this.isRevoking = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'revoke', {
              mode: 'class',
              data: {
                id: this.formData.step1.id,
                comment: this.revoke_comment
              }
            });
            request.then(function () {
              _this9.isShowRevokeModal = false;
              _this9.isShowSuccessfullyRevokedModal = true;
              _this9.isRevoking = false;
              _this9.redirectBack();
            }, function (response) {
              console.log(response);
              this.isRevoking = false;
              alert('Ошибка!');
            });
          },
          deleteElement: function deleteElement() {
            var _this10 = this;
            this.isDeleting = true;
            var request = BX.ajax.runComponentAction('renins:job_profile', 'removeItems', {
              mode: 'class',
              data: {
                id: [this.formData.step1.id],
                deleting: this.statusId === 'trash' ? 'Y' : 'N'
              }
            });
            request.then(function () {
              _this10.isDeleting = false;
              _this10.isShowSuccessfullyArchivedModal = true;
              _this10.isShowDeleteModal = false;
              _this10.redirectBack();
            }, function (response) {
              console.log(response);
              this.isDeleting = false;
              alert('Ошибка!');
            });
          },
          redirectBack: function redirectBack(mode) {
            console.log('redirect');
            var query = '';
            if (mode === 'filled' && !this.isOD) query = '?' + mode + '=' + this.formData.step1.id;
            window.location.href = document.referrer;
          },
          autoSave: function autoSave(val, version) {
            var _this11 = this;
            // Ждем пока выполнится сохранение
            if (this.isAutoSaving === true) setTimeout(this.autoSave, this.autoSaveDelay, val, version);else
              // Если уже внесли новые изменения, то сохраняем последнее
              if (version === this.version) {
                console.log('formData', val);
                var formData = this.getDifData(val);
                if (!formData || Object.keys(formData).length === 0 || formData.hasOwnProperty('id') && Object.keys(formData).length === 1) return;
                if (formData.hasOwnProperty('addApprovers') && formData.addApprovers.length === 0) formData.addApprovers = [''];
                if (formData.hasOwnProperty('addObservers') && formData.addObservers.length === 0) formData.addObservers = [''];
                formData.id = this.formData.step1.id;
                console.log('Изменения', formData);
                this.isAutoSaving = true;
                var request = BX.ajax.runComponentAction('renins:job_profile', 'save', {
                  mode: 'class',
                  data: {
                    formData: formData
                  }
                }).then(function (response) {
                  console.log('Автосохранение', response);
                  _this11.formData.step1.id = response.data.formData.id + '';
                  _this11.isSaving = false;
                  _this11.initiator = response.data.initiator;
                  _this11.status = response.data.status;
                  _this11.statusClass = response.data.statusClass;
                  _this11.stage = response.data.stage;
                  _this11.stages = response.data.stages;
                  _this11.processingUser = response.data.processingUser;
                  _this11.processingUsers = response.data.processingUsers;
                  _this11.createDate = response.data.createDate;
                  _this11.updateDate = response.data.updateDate;
                  _this11.modelRole = response.data.modelRole;
                  _this11.roleSLA = response.data.roleSLA;
                  _this11.isAutoSaving = false;
                  if (_this11.breadcrumbs.length === 3) _this11.breadcrumbs.pop();
                  _this11.breadcrumbs.push({
                    label: 'ID ' + _this11.formData.step1.id
                  });
                  window.history.replaceState(null, null, '/renins/job_profile/?DRAFT=' + _this11.formData.step1.id);
                }, function (response) {
                  console.log('Ошибка автосохранения', response);
                  _this11.isAutoSaving = false;
                });
                this.copyFormForEdit();
              }
          },
          stepHasErrors: function stepHasErrors(step) {
            var _this12 = this;
            var errorsCount = 0;
            var requiredFields = Object.keys(this.requiredFields).filter(function (key) {
              return _this12.requiredFields[key].step == step;
            });
            requiredFields.forEach(function (key) {
              if (_this12.errors[key]) {
                errorsCount++;
              }
            });
            return errorsCount > 0;
          },
          validateStep: function validateStep(step, revalidate) {
            var _this13 = this;
            //this.errors = {};
            var errorsCount = 0;
            //return errorsCount === 0;
            var requiredFields = Object.keys(this.requiredFields).filter(function (key) {
              if (revalidate && !_this13.errors.hasOwnProperty(key)) {
                return false;
              }
              if (_this13.requiredFields[key].step == step) {
                return true;
              }
              return false;
            });
            console.log('requiredFields', requiredFields);
            requiredFields.forEach(function (key) {
              if (_this13.errors.hasOwnProperty(key)) {
                delete _this13.errors[key];
              }
              var relHasValue = false;
              var fieldValue = _this13.formData['step' + step][key];
              var hasRel = Boolean(_this13.requiredFields[key].rel) || _this13.requiredFields[key].relFields.length > 0; // Зависиме поле
              if (hasRel && _this13.requiredFields[key].rel) {
                var relValue = _this13.formData['step' + step][_this13.requiredFields[key].rel];
                if (_this13.requiredFields[key].relValue.length) {
                  relHasValue = _this13.requiredFields[key].relValue.includes(relValue);
                } else {
                  relHasValue = Boolean(relValue);
                }
              }
              _this13.requiredFields[key].relFields.forEach(function (item) {
                var relValue = _this13.formData['step' + step][item];
                if (relValue) {
                  relHasValue = true;
                }
              });

              // Если массив (цели или обязанности)
              if (Array.isArray(fieldValue)) {
                fieldValue = fieldValue.filter(function (v) {
                  if (babelHelpers["typeof"](v) === 'object' && v.hasOwnProperty('duty')) {
                    return v.duty && v.result;
                  }
                  return v;
                }).join('');
              }

              // Если объект (компетенции на 14 шаге)
              if (!Array.isArray(fieldValue) && fieldValue instanceof Object) {
                fieldValue = Object.keys(fieldValue).filter(function (item) {
                  return fieldValue[item];
                }).length >= _this13.requiredFields[key].minObjValues;
              }

              // Проверка заполнение одного из полей
              _this13.requiredFields[key].radioFields.forEach(function (field) {
                if (!fieldValue) {
                  fieldValue = _this13.formData['step' + step][field];
                }
              });

              // Провезка зависимых полей
              if (hasRel) {
                if (!fieldValue && relHasValue) {
                  _this13.errors[key] = true;
                  //console.log(`${key}: обязательное для заполнения (зависимое)`);
                  errorsCount++;
                }
              } else if (!fieldValue) {
                _this13.errors[key] = true;
                // console.log(`${key}: обязательное для заполнения`);
                errorsCount++;
              }
            });
            this.errors = _objectSpread({}, this.errors);

            // Помечаем что шаг проходил проверку
            if (!revalidate && !this.validatedSteps.includes(step)) {
              this.validatedSteps.push(step);
            }
            if (step === 8) {
              var _this$formData$step = this.formData.step8,
                isNotInvolvedInBudgetManagement = _this$formData$step.isNotInvolvedInBudgetManagement,
                isControlTargetBudget = _this$formData$step.isControlTargetBudget,
                isPrepareProposalsToSpendBudget = _this$formData$step.isPrepareProposalsToSpendBudget,
                hasAuthorityToMakeDecisions = _this$formData$step.hasAuthorityToMakeDecisions,
                CnBSum = _this$formData$step.CnBSum,
                nonCnBSum = _this$formData$step.nonCnBSum;

              // Проверяем, есть ли поля в requiredFields
              var fieldsToCheck = ['isNotInvolvedInBudgetManagement', 'isControlTargetBudget', 'isPrepareProposalsToSpendBudget', 'hasAuthorityToMakeDecisions', 'CnBSum', 'nonCnBSum'];

              // Проверяем, есть ли хотя бы одно из полей в requiredFields
              var shouldValidate = fieldsToCheck.some(function (field) {
                return _this13.requiredFields.hasOwnProperty(field);
              });
              if (shouldValidate) {
                var needValidateSums = isControlTargetBudget || isPrepareProposalsToSpendBudget || hasAuthorityToMakeDecisions;

                // Проверяем суммы только если был триггер валидации
                if (this.formData.step8.validationTriggered && needValidateSums) {
                  var sumErrors = 0;
                  if (!CnBSum && this.requiredFields.hasOwnProperty('CnBSum')) {
                    this.errors['CnBSum'] = true;
                    sumErrors++;
                  }
                  if (!nonCnBSum && this.requiredFields.hasOwnProperty('nonCnBSum')) {
                    this.errors['nonCnBSum'] = true;
                    sumErrors++;
                  }
                  if (sumErrors > 0) {
                    errorsCount += sumErrors;
                  }
                }
              }
            }
            return errorsCount === 0;
          },
          revalidateStep: function revalidateStep(step) {
            this.validateStep(step, true);
          },
          updateManagers: function updateManagers(cost) {
            var _this14 = this;
            if (cost) {
              var request = BX.ajax.runComponentAction('renins:job_profile', 'getUserByPid', {
                mode: 'class',
                data: {
                  pid: cost.func1Pid
                }
              });
              request.then(function (response) {
                _this14.formData.step1.func1Pid = response.data.id;
                _this14.formData.step1.managerExcoFio = response.data.fio;
                _this14.formData.step1.managerExcoIsObserver = true;
              }, function (response) {
                console.log(response);
                alert('Ошибка!');
              });
              var request2 = BX.ajax.runComponentAction('renins:job_profile', 'getUserByPid', {
                mode: 'class',
                data: {
                  pid: cost.func2Pid
                }
              });
              request2.then(function (response) {
                _this14.formData.step1.func2Pid = response.data.id;
                _this14.formData.step1.managerLineFio = response.data.fio;
                _this14.formData.step1.managerLineIsObserver = true;
              }, function (response) {
                console.log(response);
                alert('Ошибка!');
              });
            }
          }
        },
        watch: {
          formData: {
            handler: function handler(val, old) {
              var version = ++this.version;
              setTimeout(this.autoSave, this.autoSaveDelay, val, version);
              this.revalidateStep(this.currentStep);
            },
            deep: true
          },
          'formData.step1.admManager': function formDataStep1AdmManager(value) {
            var _this15 = this;
            setTimeout(function () {
              if (value) {
                if (_this15.$refs.adm.$refs.position.value) _this15.formData.step1.admManagerPosition = _this15.$refs.adm.$refs.position.value;
              } else {
                _this15.formData.step1.admManagerPosition = '';
              }
            }, 50);
          },
          'formData.step1.funcManager': function formDataStep1FuncManager(value) {
            var _this16 = this;
            setTimeout(function () {
              if (value) {
                if (_this16.$refs.func.$refs.position.value) _this16.formData.step1.funcManagerPosition = _this16.$refs.func.$refs.position.value;
              } else {
                _this16.formData.step1.funcManagerPosition = '';
              }
            }, 50);
          },
          'formData.step1.costCenter': function formDataStep1CostCenter(value) {
            var cost = this.costCenters.find(function (item) {
              return item.value === value;
            });
            if (cost) {
              this.formData.step1.func1Name = cost.func1Name;
              this.formData.step1.func2Name = cost.func2Name;
              this.updateManagers(cost);
            } else {
              this.formData.step1.func1Name = null;
              this.formData.step1.func1Pid = null;
              this.formData.step1.managerExcoFio = null;
              this.formData.step1.managerExcoIsObserver = false;
              this.formData.step1.func2Name = null;
              this.formData.step1.func2Pid = null;
              this.formData.step1.managerLineFio = null;
              this.formData.step1.managerLineIsObserver = false;
            }
          },
          'formData.step2.hasSubs': function formDataStep2HasSubs(value) {
            if (value) {
              if (parseInt(this.formData.step2.subordinatesCount) === 0) this.formData.step2.subordinatesCount = '';
              if (parseInt(this.formData.step2.allSubordinatesCount) === 0) ;
              this.formData.step2.allSubordinatesCount = '';
            } else {
              this.formData.step2.subordinatesCount = 0;
              this.formData.step2.allSubordinatesCount = 0;
            }
          },
          'formData.step2.hasFuncSubs': function formDataStep2HasFuncSubs(value) {
            if (value) {
              if (parseInt(this.formData.step2.funcSubordinatesCount) === 0) this.formData.step2.funcSubordinatesCount = '';
            } else this.formData.step2.funcSubordinatesCount = 0;
          },
          'formData.step2.hasProjectSubs': function formDataStep2HasProjectSubs(value) {
            if (value) {
              if (parseInt(this.formData.step2.projectSubordinatesCount) === 0) this.formData.step2.projectSubordinatesCount = '';
            } else this.formData.step2.projectSubordinatesCount = 0;
          },
          'formData.step2.hasOutsourceSubs': function formDataStep2HasOutsourceSubs(value) {
            if (value) {
              if (parseInt(this.formData.step2.outsourceSubordinatesCount) === 0) this.formData.step2.outsourceSubordinatesCount = '';
            } else this.formData.step2.outsourceSubordinatesCount = 0;
          },
          'formData.step15.premiumMonth': function formDataStep15PremiumMonth(value) {
            if (value) {
              this.formData.step15.premiumQuarter = false;
              this.formData.step15.premiumHalfyear = false;
              this.formData.step15.premiumYear = false;
            }
          },
          'formData.step15.premiumQuarter': function formDataStep15PremiumQuarter(value) {
            if (value) {
              this.formData.step15.premiumMonth = false;
              this.formData.step15.premiumHalfyear = false;
            }
          },
          'formData.step15.premiumHalfyear': function formDataStep15PremiumHalfyear(value) {
            if (value) {
              this.formData.step15.premiumMonth = false;
              this.formData.step15.premiumQuarter = false;
              this.formData.step15.premiumYear = false;
            }
          },
          'formData.step15.premiumYear': function formDataStep15PremiumYear(value) {
            if (value) {
              this.formData.step15.premiumMonth = false;
              this.formData.step15.premiumHalfyear = false;
            }
          },
          'formData.step15.gradeNotDefined': function formDataStep15GradeNotDefined(value) {
            if (value) this.formData.step15.grade = '';
          },
          'formData.step15.forkMid': function formDataStep15ForkMid(value) {
            if (value) {
              this.formData.step15.forkLow = Math.floor(parseInt(value.replaceAll(' ', '')) * 0.7);
              this.formData.step15.forkHigh = Math.ceil(parseInt(value.replaceAll(' ', '')) * 1.3);
            } else {
              this.formData.step15.forkLow = '';
              this.formData.step15.forkHigh = '';
            }
          },
          'currentStep': function currentStep(value) {
            if (value === 1) {
              this.current_step_section = 'HR OD';
            }
            if (value >= 2 && value <= 13) {
              this.current_step_section = 'Руководитель';
            }
            if (value === 14) {
              this.current_step_section = 'T&D';
            }
          },
          'current_step_section': function current_step_section(value) {
            if (value === 'HR OD') {
              this.currentStep = 1;
            }
            if (value === 'Руководитель' && !(this.currentStep >= 2 && this.currentStep <= 13)) {
              this.currentStep = 2;
            }
            if (value === 'T&D') {
              this.currentStep = 14;
            }
            if (value === 'C&B') {
              this.currentStep = 15;
            }
          },
          'formData.step8.CnBSum': function formDataStep8CnBSum(newVal) {
            if (newVal) this.errors.CnBSum = false;
          },
          'formData.step8.nonCnBSum': function formDataStep8NonCnBSum(newVal) {
            if (newVal) this.errors.nonCnBSum = false;
          },
          dragItems: {
            handler: function handler(newItems) {
              // Синхронизируем изменения в dragItems с formData.step4.mainDuties
              this.formData.step4.mainDuties = newItems;
            },
            deep: true // Важно: наблюдаем за изменениями внутри массива
          },

          dragItemsAdd: {
            handler: function handler(newItems) {
              // Синхронизируем изменения в dragItemsAdd с formData.step4.addDuties
              this.formData.step4.addDuties = newItems;
            },
            deep: true // Важно: наблюдаем за изменениями внутри массива
          }
        },

        computed: {
          recommendFormat: function recommendFormat() {
            var a = this.formData.step2.relationOutClients;
            var b = this.formData.step2.relationInClients;
            var c = this.formData.step2.physicService;
            var d = this.formData.step2.difficultAttractComps;
            var e = this.formData.step2.workModeSubs;
            if (!a && !b && !c && !d && !e) return '';
            var if1 = [a, b, c].indexOf('Да, нельзя делать удаленно') >= 0 ? 'Офисный' : [a, b, c].indexOf('Да, частично можно делать удаленно') >= 0 ? 'Гибридный' : 'Удаленный';
            if (e === 'Да, есть подчиненные со стандартным режимом') return 'Офисный';else {
              if (e === 'Да, все подчиненные с комбинированным и дистанционным режимом') {
                if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else return 'Гибридный';
              } else {
                if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else {
                  if ([a, b, c].indexOf('Да, частично можно делать удаленно') >= 0) return 'Гибридный';else {
                    if (if1 === 'Удаленный' && d === 'Да') return 'Удаленный';else {
                      if ([a, b, c].indexOf('Да, нельзя делать удаленно') >= 0) return 'Офисный';else {
                        if ([a, b, c].indexOf('Да, частично можно делать удаленно') >= 0) return 'Гибридный';else return 'Удаленный';
                      }
                    }
                  }
                }
              }
            }
            return '';
          }
        }
      }).mount('#job_profile');
    });

}((this.window = this.window || {})));
